#!/usr/bin/env ruby
#
# this script assumes the "dark" variant of the theme is suffixed with "-dark" and the light variant
# does not have a suffix.
#
module ThemeSettings
  DARK_THEME_SUFFIX = "-dark"

  SCHEME_DIR = "/org/gnome/desktop/interface/color-scheme"
  SCHEME_DEFAULT = "default"
  SCHEME_PREFER_DARK = "prefer-dark"

  THEME_DIR = "/org/gnome/desktop/interface"
  THEME_KEYS = %w[gtk-theme icon-theme]

  class << self
    def toggle
      if dark_mode?
        set_light_mode
        # GhosttySettings.new.set_light_mode
      else
        set_dark_mode
        # GhosttySettings.new.set_dark_mode
      end
    end

    def dark_mode?
      color_scheme == SCHEME_PREFER_DARK
    end

    def set_light_mode
      set_color_scheme SCHEME_DEFAULT
      THEME_KEYS.each { |k| ensure_theme_light k }
    end

    def set_dark_mode
      set_color_scheme SCHEME_PREFER_DARK
      THEME_KEYS.each { |k| ensure_theme_dark k }
    end

    def color_scheme
      dconf_read(SCHEME_DIR)
    end

    def set_color_scheme(value)
      dconf_write(SCHEME_DIR, value)
    end

    def ensure_theme_light(key)
      path = File.join(THEME_DIR, key)
      value = dconf_read(path)
      value.delete_suffix!(DARK_THEME_SUFFIX)
      dconf_write(path, value)
    end

    def ensure_theme_dark(key)
      path = File.join(THEME_DIR, key)
      value = dconf_read(path)
      value += "-dark" unless value.end_with?(DARK_THEME_SUFFIX)
      dconf_write(path, value)
    end

    def dconf_write(path, value)
      command = %{dconf write #{path} "'#{value}'"}
      puts ">> #{command}"
      %x{#{command}}
    end

    def dconf_read(path)
      command = %{dconf read #{path}}
      puts ">> #{command}"
      %x{#{command}}.strip
        .delete_prefix("'")
        .delete_suffix("'")
    end
  end

  class GhosttySettings
    SETTINGS_FILE = "#{ENV["HOME"]}/.config/ghostty/config"

    class << self
      def toggle
        new.toggle
      end
    end

    def toggle
      if dark_mode?
        set_light_mode
      else
        set_dark_mode
      end
    end

    def dark_mode?
      active_theme_line = settings.find { |line| line =~ /^theme\s*=/ }
      active_theme_line.include?("Dark")
    end

    def set_light_mode
      settings.each_with_index do |line, j|
        next unless line =~ /^#?\s*theme\s*=/
        settings[j] = if line.include?("Light")
          ensure_line_uncommented(line)
        else
          ensure_line_commented(line)
        end
      end
      write_settings
    end

    def set_dark_mode
      settings.each_with_index do |line, j|
        next unless line =~ /^#?\s*theme\s*=/

        settings[j] = if line.include?("Dark")
          ensure_line_uncommented(line)
        else
          ensure_line_commented(line)
        end
      end
      write_settings
    end

    def ensure_line_uncommented(line)
      line.sub(/^\s*#\s*/, "")
    end

    def ensure_line_commented(line)
      ensure_line_uncommented(line).sub(/^/, "# ")
    end

    def settings
      @settings ||= File.read(SETTINGS_FILE).lines
    end

    def write_settings
      puts settings
      File.write(SETTINGS_FILE, settings.join)
    end
  end
end

ThemeSettings.toggle
