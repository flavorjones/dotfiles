#!/usr/bin/env ruby
#
#  for syntax and usage of rofi scripts, read ~/code/oss/rofi/doc/rofi-script.5.markdown
#
require "digest"
require "singleton"
require "uri"

# relative to ~
search_directories = ["Documents", "Downloads", "Desktop", "Videos"]

module Rofi
  def self.open(path)
    pid = Process.spawn("xdg-open", path, [:out, :err] => "/dev/null")
    Process.detach(pid)
  end

  def self.meta(key, value)
    "\x00" + key + "\x1f" + value
  end

  def self.set_prompt(user_prompt)
    puts meta("prompt", user_prompt)
  end
end

class Thumbnail
  include Singleton

  THUMBNAIL_BASE = File.join(ENV["HOME"], ".cache", "thumbnails")

  def [](digest)
    hash[digest]
  end

  def hash
    @hash ||= generate_hash
  end

  private

  def generate_hash
    Hash.new.tap do |thumbnail_hash|
      Dir.glob(File.join(THUMBNAIL_BASE, "**", "*")).each do |thumbnail_path|
        digest = File.basename(thumbnail_path, ".*")
        thumbnail_hash[digest] = thumbnail_path
      end
    end
  end
end

module FileFinder
  BASE = ENV["HOME"]
  URI_PREFIX = "file://"
  URI_PARSER = URI::Parser.new

  attr_reader :directories

  def initialize(directories)
    @directories = directories
  end

  def self.file_uri(absolute_path)
    URI_PREFIX + URI_PARSER.escape(absolute_path)
  end

  def self.digest(uri)
    Digest::MD5.hexdigest(uri)
  end

  def self.thumbnail(relative_path)
    Thumbnail.instance[digest(file_uri(File.absolute_path(relative_path)))]
  end

  def self.paths(directories)
    globs = directories.map { |directory| File.join(directory, "**", "*") }
    directories + Dir.glob(globs, base: BASE)
  end

  def self.thumbnail_for(path)
    return "folder" if File.directory?(path)
    thumbnail(path)
  end

  def self.find(directories)
    paths(directories).map do |path|
      if tb = thumbnail_for(path)
        path + Rofi.meta("icon", tb)
      else
        path
      end
    end
  end
end

if ARGV.length > 0
  path = ARGV[0]
  Rofi.open(path)
  exit 0
end

Rofi.set_prompt "File"
puts FileFinder.find(search_directories)
