#! /usr/bin/env ruby
# coding: utf-8

DEBUG = ENV['DEBUG'] ? true : false

class Credential
  attr :credential_type, :credential_name

  def initialize credential_type, credential_name
    @credential_type = case credential_type
                         when :user then "--user"
                         when :pass then "--pass"
                       else
                         raise "credential type must be :user or :pass"
                       end
    @credential_name = credential_name
  end

  def to_s
    command = %Q{lpass show '#{credential_type}' '#{credential_name}'}
    @value ||= %x{#{command}}.chomp
  end
end


envs = {
  "oslv-prod" => {
    api: "https://api.run.pivotal.io",
    login: Credential.new(:user, "Shared-Open Source Licensing Tooling /OSLV PWS"),
    password: Credential.new(:pass, "Shared-Open Source Licensing Tooling /OSLV PWS"),
    org: "oslv",
    space: "production"
  },
  "oslv-dev" => {
    api: "https://api.run.pivotal.io",
    login: Credential.new(:user, "Shared-Open Source Licensing Tooling /OSLV PWS"),
    password: Credential.new(:pass, "Shared-Open Source Licensing Tooling /OSLV PWS"),
    org: "oslv",
    space: "development"
  },
  "Âµpcf" => {
    api: "https://api.local.micropcf.io",
    login: "admin",
    password: "admin",
    org: "flavorjones",
    space: "buildpack-acceptance"
  },
  "pcfdev" => {
    api: "https://api.local.pcfdev.io",
    login: "admin",
    password: "admin",
    org: "flavorjones",
    space: "buildpack-acceptance"
  },
  "pws" => {
    api: "https://api.run.pivotal.io",
    login: "mdalessio@pivotal.io",
    password: %Q(ipdbdzw}.O7Xsc|Yzk,P+l,r[),
    org: "flavorjones",
    space: "buildpack-acceptance"
  },
  "personal" => {
    api: "https://api.run.pivotal.io",
    login: "mdalessio@pivotal.io",
    password: %Q(ipdbdzw}.O7Xsc|Yzk,P+l,r[),
    org: "flavorjones",
    space: "flavorjones"
  },
  "pwsgloss" => {
    api: "https://api.run.pivotal.io",
    login: "mdalessio@pivotal.io",
    password: %Q(ipdbdzw}.O7Xsc|Yzk,P+l,r[),
    org: "pivotallabs",
    space: "flavorjones-pivotal-slack-glossary-bot"
  },
  "tabasco" => {
    api: "https://api.tabasco.cf-app.com",
    login: "admin",
    password: "sk1N875job",
    org: "flavorjones",
    space: "buildpack-acceptance"
  },
  "a1" => {
    api: "https://api.a1.cf-app.com",
    login: "admin",
    password: "whi+eBaboon88",
    org: "flavorjones",
    space: "buildpack-acceptance"
  },
  "bp" => {
    api: "http://api.bp-ci-8.cf-app.com",
    login: "admin",
    password: "HeDiedWith3LobstersInHisHands",
    org: "flavorjones-org",
    space: "flavorjones-space"
  },
  "stack" => {
    api: "http://api.stack-ci-8.cf-app.com",
    login: "admin",
    password: "HeDiedWith3LobstersInHisHands",
    org: "flavorjones-org",
    space: "flavorjones-space"
  },
  "appdog" => {
    api: "https://api.run.pivotal.io",
    login: Credential.new(:user, "Shared-AppDog/PWS Appdog"),
    password: Credential.new(:pass, "Shared-AppDog/PWS Appdog"),
    org: "Appdog",
    space: "acceptance"
  },
  "pivnet" => {
    api: "https://api.run.pivotal.io",
    login: Credential.new(:user, "Shared-PivNet/PWS Console"),
    password: Credential.new(:pass, "Shared-PivNet/PWS Console"),
    org: "pivotal",
    space: "pivotal-network-production"
  },
  "hackday-red" => {
    api: "https://api.sys.ctf-red.cf-app.com",
    login: "user43",
    password: "44cb73",
    org: "org43",
    space: "flavorjones-hackday"
  },
  "hackday-blue" => {
    api: "https://api.sys.ctf-blue.cf-app.com",
    login: "user43",
    password: "44cb73",
    org: "org43",
    space: "flavorjones-hackday"
  },
}

def run cmd
  puts "+ #{cmd}" if DEBUG
  system cmd
end

env = envs[ARGV[0]]

unless env
  puts "USAGE: cf-api <env>"
  puts
  puts "  where <env> is one of:"
  envs.keys.each do |env|
    puts "  - #{env}"
  end
  puts
  exit 1
end

puts env if DEBUG

run "cf api --skip-ssl-validation #{env[:api]}"
run "cf auth '#{env[:login].to_s}' '#{env[:password].to_s}'"

if env[:org]
  if ! run "cf orgs | egrep -q '^#{env[:org]} *$'"
    run "cf create-org '#{env[:org]}'"
  end
  run "cf target -o '#{env[:org]}'"

  if env[:space]
    if ! run "cf spaces | egrep -q '^#{env[:space]} *$'"
      run "cf create-space '#{env[:space]}'"
    end
    run "cf target -s '#{env[:space]}'"
  end
end
