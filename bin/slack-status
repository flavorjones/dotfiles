#! /usr/bin/env ruby

require 'httparty'
require 'json'
require 'yaml'

TOKEN_KEYS = %w[slack/pivotal/token slack/cloudfoundry/token]
TOKEN_FILE = File.join(ENV['HOME'], ".tokens")

STATUSES = {
  boston:   %w[:boston: Boston],
  denver:   %w[:snow_capped_mountain: Denver],
  nyc:      %w[:nyc: NYC],
  pa:       %w[:ca-flag: PA],
  sf:       %w[:sf: SF],
  wfh:      %w[:nj: WFH@NJ],

  commute:  %w[:train: Commuting],
  meet:     %w[:telephone_receiver: In\ a\ meeting],
  plane:    %w[:airplane: On\ a\ plane],

  holiday:  %w[:penguin_dancing: On\ holiday],
  sick:     %w[:face_with_thermometer: Home\ sick],
}

def usage
  puts "USAGE: #{File.basename(__FILE__)} <#{STATUSES.keys.join("|")}}> [status-message]"
  exit 1
end

def token_for token_key
  if File.exist? TOKEN_FILE
    tokens = YAML.load_file TOKEN_FILE
    token = tokens[token_key]
    unless token.nil?
      return token
    end
  end

  token_name = "Secure Notes/#{token_key}"
  command = %Q{lpass show --notes "#{token_name}"}
  %x{#{command}}.chomp
end

class Slack
  include HTTParty
  base_uri 'slack.com'
  
  PATH = "/api/users.profile.set"

  def self.update_status token, status_pair, status_text=nil
    status_json = {
      "status_emoji" => status_pair[0],
      "status_text" => (status_text || status_pair[1])
    }.to_json

    post PATH, {query: {token: token, profile: status_json}}
  end

end

status_key = ARGV[0]
status_text = ARGV[1] # nil is ok
usage if status_key.nil?

TOKEN_KEYS.each do |token_key|
  status = STATUSES[status_key.to_sym]
  usage if status.nil?

  puts "updating #{token_key} ..."
  token = token_for token_key

  Slack.update_status token, status, status_text
end
