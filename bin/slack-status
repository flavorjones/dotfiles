#! /usr/bin/env ruby

require 'httparty'
require 'json'
require 'yaml'
require 'logger'
require 'pp'

TOKEN_KEYS = %w[slack/pivotal/token slack/cloudfoundry/token]
TOKEN_FILE = File.join(ENV['HOME'], ".tokens")

STATUSES = {
  dublin:   %w[:shamrock: Dublin],
  boston:   %w[:boston: Boston],
  nyc:      %w[:nyc: NYC],
  nj:       %w[:nj: NJ],
  denver:   %w[:snow_capped_mountain: Denver],
  sf:       %w[:sf: SF],
  pa:       %w[:ca-flag: PA],
  la:       [":palm_tree:", "Santa Monica"],
  none:     ["", ""],

  commute:  %w[:train: Commuting],
  meet:     %w[:telephone_receiver: In\ a\ meeting],
  plane:    %w[:airplane: On\ a\ plane],

  holiday:  %w[:penguin_dancing: On\ holiday],
  sick:     %w[:face_with_thermometer: Home\ sick],

  offline:  %w[:octagonal_sign: Offline],
}

def usage
  puts "USAGE: #{File.basename(__FILE__)} <#{STATUSES.keys.join("|")}}> [status-message]"
  exit 1
end

def read_from_cache token_key
  if File.exist? TOKEN_FILE
    tokens = YAML.load_file TOKEN_FILE
    token = tokens[token_key]
    unless token.nil?
      return token
    end
  end
end

def write_to_cache token_key, token_value
  tokens = {}
  if File.exist? TOKEN_FILE
    tokens = YAML.load_file TOKEN_FILE
  end

  tokens[token_key] = token_value

  File.open(TOKEN_FILE, "w") do |f|
    f.write YAML.dump(tokens)
  end

  token_value
end

def read_from_lpass token_key
  token_name = "Secure Notes/#{token_key}"
  command = %Q{lpass show --notes "#{token_name}"}
  %x{#{command}}.chomp
end

def token_for token_key
  token_value = read_from_cache token_key
  return token_value if token_value

  token_value = read_from_lpass token_key
  return nil if token_value.nil? or token_value.length == 0

  write_to_cache token_key, token_value
end

class Slack
  include HTTParty
  base_uri 'slack.com'
  # logger ::Logger.new(STDOUT), :info, :curl
  
  PATH = "/api/users.profile.set"

  def self.update_status token, status_pair, status_text=nil
    status_json = {
      "status_emoji" => status_pair[0],
      "status_text" => (status_text || status_pair[1])
    }.to_json

    response = post PATH, {query: {token: token, profile: status_json}}
    raise response["error"] if response["error"]
  end
end

status_key = ARGV[0]
status_text = ARGV[1] # nil is ok
usage if status_key.nil?

TOKEN_KEYS.each do |token_key|
  status = STATUSES[status_key.to_sym]
  usage if status.nil?

  puts "updating #{token_key} ..."
  token = token_for token_key

  Slack.update_status token, status, status_text
end
