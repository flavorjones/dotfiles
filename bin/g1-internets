#! /usr/bin/env ruby

require 'fileutils'
require 'socket'

def notify(msg)
  system %Q(notify-send -t 2000 g1-internets "#{msg}")
  puts "#{Time.now}: #{msg}"
end

def be_graceful_on_interrupt
  Signal.trap("INT") do
    puts "gracefully exiting."
    exit 0
  end
end

def try_to_synch
  be_graceful_on_interrupt

  mount = "/media/AFEA-1EE7"
  pc2ph_map = {
    # "/home/mike/Shared/DropBox/KeePass/vault_personal.kdb" => "/keepass/keepass.kdb"
  }
  ph2pc_map = {
    "/DCIM/Camera/" => "/home/mike/Pictures/PhonePics"
  }

  was_mounted = nil
  while true do
    if File.directory? mount
      notify "mounted USB device found." unless was_mounted
      was_mounted = true

      pc2ph_map.each do |source, dest|
        fq_dest = File.join(mount, dest)
        FileUtils.mkdir_p File.dirname(fq_dest)
        system "rsync -ai '#{source}' '#{fq_dest}'"
        system "chmod ugo-w '#{fq_dest}'"
      end

      ph2pc_map.each do |source, dest|
        fq_source = File.join(mount, source)
        FileUtils.mkdir_p File.dirname(dest)
        system "rsync -ai --ignore-existing '#{fq_source}' '#{dest}'"
      end
    else
      notify "USB device is not mounted." unless was_mounted == false
      was_mounted = false
    end
    sleep 30
  end
end

processes = []

processes << Process.fork { try_to_synch }

Signal.trap("INT") do
  puts "caught interrupt, killing slaves."
  processes.each { |p| Process.kill "INT", p }
end

processes.length.times { Process.wait }

exit 0
