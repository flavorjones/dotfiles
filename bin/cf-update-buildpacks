#! /usr/bin/env bash

set -o errexit

function try_to_checkout
{
  branch=$1
  if git branch -a | egrep " (origin/)?${branch}" > /dev/null ; then
    git checkout "${branch}"
  else
    echo "----- could not find ${branch}, using master instead"
    git checkout master
  fi
}

function do_it
{
  repo=$1
  branch=$2
  dir=$(basename "${repo}")

  echo "===== ${repo} ${branch} ====="

  if [[ -d ${dir} ]] ; then
    pushd "${dir}"
      if [[ -e cf.Gemfile.lock ]] ; then
        git checkout cf.Gemfile.lock
      fi
      try_to_checkout "${branch}"
      git pull --ff-only --tags
      git submodule update --recursive --init
    popd
  else
    git clone --recursive "${repo}"
  fi

  echo
}

branch=$1
if [[ $branch == "" ]] ; then
  echo "USAGE: update-all <branch-name>"
  exit 1
fi

# set -o xtrace
bpdir="${HOME}"/code/cf/Buildpacks
mkdir -p "${bpdir}"
cd "${bpdir}"

BUILDPACKS="
cloudfoundry/binary
cloudfoundry/go
cloudfoundry/java
cloudfoundry/nodejs
cloudfoundry/php
cloudfoundry/python
cloudfoundry/ruby
cloudfoundry/staticfile
cloudfoundry-incubator/dotnet-core
"

# cloudfoundry-incubator/multi-buildpack
OTHER_REPOS="
cloudfoundry-incubator/compile-extensions
cloudfoundry/binary-builder
cloudfoundry/brats
cloudfoundry/buildpack-packager
cloudfoundry/buildpacks-ci
cloudfoundry/machete
cloudfoundry/stacks
cloudfoundry/buildpack-releases
"

for b in ${BUILDPACKS} ; do
  do_it "git@github.com:${b}-buildpack" "${branch}"
done

for repo in ${OTHER_REPOS} ; do
  do_it "git@github.com:${repo}" "${branch}"
done

echo
echo "=========="
echo " DONE"
echo "=========="
echo
