#! /usr/bin/env bash
#
# Starting from a fresh machine
# ===============================
#
# High Priority
# -------------
#
# 1. set CapsLock to Ctrl, compose key to right-alt, set sloppy window focus
# 2. recover ssh keys - use krypton!! https://krypt.co/
# 3. `sudo apt-get install git ruby rake`
# 4. clone dotfiles repo, run setup, re-login
# 5. run `dev-machine-recipe` (this script!)
# 6. clone emacs.d repo, run rake
# 7. set up dropbox
# 8. symlink Documents → Dropbox/Mike
# 9. set up chrome profiles
# 10. add guake and devilspie2 to startup applications
# 11. add cinnamon applet: "Multi-Core System Monitor"
#
#
# Medium Priority
# --------------
#
# 1. configure timeshift backups
# 2. install gvm
# 3. install cxoffice and microsoft office stuff
# 5. Set "Input Settings" to use XIM (see XCompose notes below)
# 6. `apt install linux-lowlatency` for the default linux kernel version as lowlatency
# 7. monitors / fractional scaling. what seems to work is:
#    - hi-res at 175%
#    - low-res at 125%
#    - but watch out for chrome perf: [Chrome menus too slow after enabling fractional scaling](https://askubuntu.com/questions/1274719/chrome-menus-too-slow-after-enabling-fractional-scaling-in-ubuntu-20-04)
# 8. firewall rules
#    > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 22 # ssh
#    > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 24800 # synergy
#
#
# Low Priority
# ------------
#
# 1. set background images from Documents/Pictures/Desktop\ Backgrounds
# 2. desktop config (automation in progress!)
# 3. color: clone https://github.com/Mayccoll/Gogh and install solarized theme for gnome terminal
# 4. color: clone https://github.com/seebi/dircolors-solarized and use the 'ansi-dark' config
# 5. multi-monitor: use something like `xrandr --output DP-3 --pos 1728x303` to position the wide
#    monitor to the right of the tall narrow monitor. (0,0) is the top left of the virtual desktop.
#    you can edit ~/.config/cinnamon-monitors.xml to make this permanent.
# 6. multi-monitor: cursor flickering on hidpi monitor. run `xrandr --output DP-3 --scale 0.9999x0.9999`
# 7. mouse theme for screencasts https://github.com/iPAS/DMZ-White-Highlighted
#
# Chrome Flags
# ----------
# chrome://flags/#read-later
# chrome://flags/#enable-tab-search
# chrome://flags/#tab-groups-collapse
# chrome://flags/#tab-groups-auto-create
# chrome://flags/#tab-groups-collapse-freezing
#
#
# Chrome Extensions
# ----------
# Quick Tabs: https://chrome.google.com/webstore/detail/quick-tabs/jnjfeinjfmenlddahdjdmgpbokiacbbb
# Session Buddy: https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko
# [The Marvellous Suspender - Chrome Web Store](https://chrome.google.com/webstore/detail/the-marvellous-suspender/noogafoofpebimajpfpamcfhoaifemoa?hl=en-US)
# Calendar Event Merge: https://chrome.google.com/webstore/detail/event-merge-for-google-ca/idehaflielbgpaokehlhidbjlehlfcep
#
# [Simplify Gmail](https://simpl.fyi/)
# [Gmail Quick Links - Chrome Web Store](https://chrome.google.com/webstore/detail/gmail-quick-links/ecbkcjeoffcjnppapdlncohmehhnfibd/related?hl=en-US)
#
# [Copy as Markdown - Chrome Web Store](https://chrome.google.com/webstore/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn/related?hl=en)
#
# AdGuard Adblocker: https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg
# AdBlock: https://chrome.google.com/webstore/detail/adblock-%E2%80%94-best-ad-blocker/gighmmpiobklfepjocnamgkkbiglidom/related
#
#
# Synergy - desktop share
# ==========
#
# When sharing with a mac (as client), set up a hotkey so that you can lock the Mac
#
# * Control+Alt+k on linux (server) → Control+Alt+q on macos (catalina only?)
#
#
# Mac Setup
# ==========
#
# Window resizing and tiling: use https://rectangleapp.com/ and default keys
# (previously you had used ShiftIt and before that SizeUp)
#
# Do this: https://gist.github.com/SeppoTakalo/f526f761a44f07464cb5df89c8a9389e
# - iterm2, set profile colors to Solarized Dark
#
# Iterm2 key bindings (forward-word, backward-word, delete-word)
# - https://apple.stackexchange.com/a/204802/169366
#
# Emacs: https://emacsformacosx.com/
# - configure browse-url to use mac default browser
#
# To stop from sleeping when locking screen:
#   brew cask install keepingyouawake
#
# To stop horizontal scrolling from being interpreted as "back in history" in Chrome:
#   System Prefs → Trackpad → More Gestures → turn off "Swipe between pages"
#
# If you want to connect the bluetooth trackpoint keyboard, you'll need to figure out something for enabling middle-click scrolling.
# - https://medium.com/@takezoe/thinkpad-bluetooth-wireless-keyboard-with-macbook-7a911ed77c28 points at https://github.com/pqrs-org/Karabiner-Elements
#
# Emacs won't have access to ~/Documents - fix it with https://apple.stackexchange.com/questions/371888/restore-access-to-file-system-for-emacs-on-macos-catalina
#
#
# Disk Help
# =========
#
# Mostly out of date these days, instead use the default LVM partitioning.
#
# Encrypted LVM help
# ------------------
#
# https://help.ubuntu.com/community/ResizeEncryptedPartitions
#
#
# Recommended disk config if you're going to fiddle
# -------------------------------------------------
#
# root - 20GB ext4
# swap - 8GB - 16GB swap
# home - whatever's left ext4
#
#
# DELL XPS
# ========
#
# Upstream software
# -----------------
#
# Connect to dell apt repositories and install custom packages
# - https://www.dell.com/community/XPS/XPS-13-9300-Does-fingerprint-reader-work-on-linux/td-p/7514958
#
#
# BIOS settings
# ------------------------------------
#
# OMG BIOS settings can get changed when the battery discharges, WTF
#
# Make sure you set the disk controller to AHCI (may get set to RAID, that's bad)
# - https://forums.linuxmint.com/viewtopic.php?t=322351
#
# Turn off "Sign of Life"
# - https://www.dell.com/community/XPS/XPS-13-9300-Wake-from-sleep/m-p/7535386/highlight/true#M59272
#
#
# Input Font config
# =================
#
#   https://input.fontbureau.com/
#
#   config:
#     Alternates
#       --asterisk=height
#       --g=ss
#       --i=serifs
#       --l=serifs_round
#
#     Line Height: 1.2×
#
#
#  Diagnosing sleep problems / power states
#  ====================
#
#  Resources
#  --------------------
#
#  - "System Power Management Sleep States" https://www.kernel.org/doc/Documentation/power/states.txt
#  - https://01.org/blogs/rzhang/2015/best-practice-debug-linux-suspend/hibernate-issues
#  - https://01.org/linuxgraphics/gfx-docs/drm/admin-guide/pm/sleep-states.html
#
#
#  Use a more-modern lowlatency kernel
#  --------------------
#
#  There's usually a meta-package, like `linux-lowlatency-hwe-20.04-edge` that will keep you up to
#  date with the latest lowlatency kernel. You can poke around with `apt-cache search lowlatency`
#
#  Otherwise, install a specific version with `apt install --install-suggests linux-image-5.8.0-31-lowlatency`
#
#  You may have problems with some specific kernel modules ...
#
#  - download v4l2loopback-dkms 0.12.5 or later from debian.org (system is 0.12.3)
#    - https://packages.debian.org/testing/kernel/v4l2loopback-dkms
#  - download virtualbox-dkms 6.1.14 or later from debian.org (system is 6.1.10)
#    - https://packages.debian.org/sid/virtualbox-dkms
#
set -o errexit
set -o xtrace

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

install_p=true
config_p=true
update_p=true
if [[ $1 == "config" ]] ; then
  echo "## configuration only"
  install_p=false
  update_p=false
elif [[ $1 == "update" ]] ; then
  echo "## update only"
  install_p=false
  config_p=false
fi

kernel_release=$(uname -r)
ossdir="${HOME}/code/oss"

if $linux_p ; then
  function apt_install {
    apt install -y -q $*
  }
  function apt_update {
    apt update -q
  }
  function apt_upgrade {
    apt_update
    apt upgrade -y -q
  }

  function firmware_upgrade {
    fwupdmgr refresh --force
    (fwupdmgr get-updates && fwupdmgr update) || true
  }

  function open {
    gnome-open $*
  }

  function snap_install {
    sudo snap install $*
  }
  function snap_upgrade {
    sudo snap refresh
  }

  function flatpak_install {
    flatpak install -y flathub $*
  }
  function flatpak_upgrade {
    flatpak update
  }

  if $install_p || $update_p ; then
    if [[ `which snap` == "" ]] ; then
      apt_install snapd
    fi

    if [[ `which flatpak-builder` == "" ]] ; then
      apt_install flatpak-builder
    fi
  fi

elif $apple_p ; then
  function brew_install {
    brew install $*
  }
  function brew_update {
    brew update
  }

  if [[ `which brew` == "" ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
fi

if $update_p ; then
  if $apple_p ; then
    brew_update
  fi
  if $linux_p ; then
    firmware_upgrade
    apt_upgrade
    snap_upgrade
    flatpak_upgrade
  fi
fi

if $install_p ; then
  if $apple_p ; then
    #
    #  basic shit
    #
    brew_install \
      coreutils \
      ack \
      tmate \
      ruby \
      pkg-config \
      ispell \
      gpg \
      marked \

  fi

  if $linux_p ; then
    #
    #  basic usability
    #
    apt_install \
      libnotify-bin \
      keepassx \
      gconf-editor dconf-cli \
      xclip \
      tree \
      terminator \
      devilspie2 \
      htop \
      guake \
      cheese \
      pavucontrol \
      gnome-applets gnome-shell-pomodoro \
      gpg

    #
    #  fonts
    #
    apt_install fonts-cmu

    # see https://bugs.launchpad.net/ubuntu/+source/msttcorefonts/+bug/1713615
    wget -c http://ftp.de.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.6_all.deb
    sudo dpkg -i ttf-mscorefonts-installer_3.6_all.deb
    apt hold ttf-mscorefonts-installer

    #
    #  basics for development and related activities
    #
    apt_install \
      git-core gitk subversion mercurial bzr \
      ruby rake \
      build-essential valgrind \
      direnv \
      emacs autocutsel \
      universal-ctags \
      mariadb-server mariadb-client libmysqlclient-dev \
      postgresql postgresql-client libpq-dev postgresql-contrib \
      openjdk-11-jdk \
      ack-grep \
      curl wget \
      cmake autoconf libtool \
      libpcre++0v5 libpcre++-dev libevent-dev \
      libssl-dev libcrypto++-dev \
      libreadline-dev \
      libxml2 libxml2-dev libxslt1.1 libxslt-dev \
      libyajl-dev libyaml-dev \
      libcurl4-openssl-dev \
      colordiff \
      zip \
      jq \
      python3 python-is-python3 \
      nodejs npm node-marked \
      markdown \
      graphviz gv \


    #
    #  REST client
    #
    snap_install insomnia


    #
    #  better sound hardware management
    #  https://yktoo.com/en/software/sound-switcher-indicator/
    #
    if [[`which indicator-sound-switcher` == ""]] ; then
      sudo apt-add-repository ppa:yktooo/ppa
      apt_update
      apt_install indicator-sound-switcher
    fi

    #
    #  heroku
    #
    if [[ `which heroku` == "" ]] ; then
      snap_install --classic heroku
    fi

    #
    #  github cli
    #
    if [[ `which gh` == "" ]] ; then
      apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
      sudo apt-add-repository https://cli.github.com/packages
      apt install gh
    fi

    # #
    # #  cf usage and development
    # #
    # if [[ `which cf` == "" ]] ; then
    #   wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
    #   echo "deb http://packages.cloudfoundry.org/debian stable main" | \
    #     sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
    #   apt_update
    #   apt_install cf-cli
    # fi

    # LPASSD="${ossdir}/lastpass-cli"
    # if [[ ! -d ${LPASSD} ]] ; then
    #   pushd ${ossdir}
    #   git clone "https://github.com/lastpass/lastpass-cli"
    #   popd
    # fi
    # if [[ `which lpass` == "" ]] ; then
    #   pushd ${LPASSD}
    #   make
    #   sudo make install
    #   popd
    # fi


    # #
    # #  licensefinder development
    # #
    # apt_install npm maven gradle rebar

    # if [[ ! -e /usr/bin/node ]] ; then
    #   # https://github.com/joyent/node/issues/3911
    #   echo "symlinking node -> nodejs"
    #   sudo ln -s /usr/bin/nodejs /usr/bin/node
    # fi

    # if [[ `which bower` == "" ]] ; then
    #   npm install -g bower
    # fi

    # if [[ `which pip` == "" ]] ; then
    #   apt_install python-pip python-dev
    #   sudo pip install --upgrade pip
    #   sudo pip install --upgrade virtualenv
    # fi


    #
    #  filesystems, vpn, RDP, bootable drives, backups, etc.
    #
    apt_install \
      hfsprogs cryptsetup \
      network-manager-openvpn-gnome \
      network-manager-vpnc-gnome \
      gufw \
      timeshift

    # apt_install \
    #   remmina remmina-plugin-rdp libfreerdp-plugins-standard remmina-plugin-vnc


    #
    #  dropbox
    #
    apt_install dropbox


    #
    #  cinnamon system monitor
    #
    apt_install gir1.2-gtop-2.0


    #
    #  virtualbox
    #
    apt_install \
      virtualbox-qt virtualbox-dkms \
      nfs-common nfs-kernel-server


    #
    #  docker
    #
    if [[ `which docker` == "" ]] ; then
      apt_install docker.io
      sudo usermod -a -G docker $USER
    else
      #  this will fail until you re-login to have the above user group take effect
      echo "checking that docker was installed correctly ..."
      docker run hello-world
    fi


    #
    #  graphics, screencaps, video and sound recording, etc.
    #
    apt_install sox libsox-fmt-mp3 \
               krita kazam gnome-sound-recorder \
               libmagickcore-dev libmagick++-dev \
               v4l2loopback-dkms v4l2loopback-utils \
               peek

    flatpak_install org.glimpse_editor.Glimpse
    snap_install shotcut

    # from https://github.com/snapcrafters/obs-studio
    #
    # use the flatpak, not the snap, because it renders better with
    # hidpi as of 2020-07. also it seems to be better supported.
    #
    # if the virtual camera isn't working, try a "modprobe -r" /
    # "modprobe" cycle on v4l2loopback
    #
    # for installing the v4l2sink extension support, see:
    #
    # > https://github.com/flathub/com.obsproject.Studio/issues/65#issuecomment-657221604
    #
    # but note that the `sirn` branch has been updated since then, so you'll need SDK 5.15 and need
    # to use the YML file.
    if [[ ! -e /etc/modprobe.d/v4l2loopback.conf ]] ; then
      echo "options v4l2loopback devices=1 video_nr=63 card_label=VirtualCam exclusive_caps=1" \
        | sudo tee /etc/modprobe.d/v4l2loopback.conf
    fi
    if [[ ! -e /etc/modules-load.d/v4l2loopback.conf ]] ; then
      echo "v4l2loopback" \
        | sudo tee /etc/modules-load.d/v4l2loopback.conf
    fi
    flatpak_install com.obsproject.Studio


    #
    #  power management
    #
    #  http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html
    #  http://linrunner.de/en/tlp/docs/tlp-configuration.html#rdw
    #  TODO: make sure touchscreen is added to USB_WHITELIST in /etc/default/tlp
    #
    apt_install tlp tlp-config tlp-rdw acpi-call-dkms smartmontools powertop


    # #
    # #  system debugging tools
    # #
    # apt_install linux-tools-common \
    #           linux-tools-generic linux-tools-${kernel_release} \
    #           wireshark \
    #           sysdig


    #
    #  ukuu
    #
    UKUUDIR="${ossdir}/ukuu"
    if [[ ! -d ${UKUUDIR} ]] ; then
      pushd ${ossdir}
      git clone "http://github.com/teejee2008/ukuu.git"
      popd
    fi
    if [[ `which ukuu` == "" ]] ; then
      apt_install libgee-0.8-dev libjson-glib-dev libvte-2.91-dev valac
      pushd ${UKUUDIR}
      git pull
      make all
      sudo make install
    fi

    #
    #  WAIT!!! Before doing the below on a fresh system - install
    #  gnome-tweaks and see if setting Keyboard → Compose Key to Right
    #  Alt works without having to do the XIM bit. Maybe yes, maybe
    #  no, but worth a try.
    #
    #  --------------------
    #
    #  .XCompose unicode input
    #
    #  Note that in order to get the custom .XCompose bindings to work
    #  in some applications, I've needed to go to "System Settings" →
    #  "Input Method" and set it to XIM. And then logout/login. IBus
    #  doesn't seem to work in:
    #
    #  - google-chrome
    #  - gnome-terminal
    #  - electron apps (like signal-desktop)
    #
    XCOMPOSEDIR="${ossdir}/xcompose"
    if [[ ! -d ${XCOMPOSEDIR} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/kragen/xcompose"
      popd
    fi

    #
    #  rbenv + ruby-build
    #
    if [[ ! -d $HOME/.rbenv ]] ; then
      git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    else
      (cd $HOME/.rbenv && git pull)
    fi
    if [[ ! -d $HOME/.rbenv/plugins/ruby-build ]] ; then
      mkdir -p $HOME/.rbenv/plugins
      git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
    else
      (cd $HOME/.rbenv/plugins/ruby-build && git pull)
    fi

    #
    #  flux-like
    #
    apt_install redshift redshift-gtk geoclue-2.0 geoclue-2-demo


    # #
    # #  golang stuff
    # #
    # #  https://johnsogg.github.io/emacs-golang
    # #
    # if [[ "$GOPATH" != "" ]] ; then
    #   go get -u golang.org/x/tools/cmd/...
    #   go get -u github.com/rogpeppe/godef/...
    #   go get -u github.com/nsf/gocode
    #   go get -u golang.org/x/tools/cmd/goimports
    #   go get -u golang.org/x/tools/cmd/guru
    #   go get -u github.com/dougm/goflymake

    #   rm ${GOPATH}/bin/bundle
    # fi


    #
    #  starship bash prompt
    #
    if [[ `which starship` == "" ]] ; then
      wget -q --show-progress https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
      tar xvf starship-x86_64-unknown-linux-gnu.tar.gz
      mv starship ${HOME}/local/bin/
    fi


    #
    #  chrome. pick one!
    #
    # if [[ `which google-chrome-beta` == "" ]] ; then
    #     open https://www.google.com/intl/en/chrome/browser/beta.html
    # fi
    if [[ `which google-chrome-stable` == "" ]] ; then
      open https://www.google.com/intl/en/chrome/browser/desktop/index.html
    fi


    #
    #  things i have to manually install (pending further automation)
    #
    if ! [[ -e /opt/zoom/ZoomLauncher ]] ; then
      open https://zoom.us/download
    fi

    if [[ `which discord` == "" ]] ; then
      open https://discordapp.com/download
    fi

    if [[ `which steam` == "" ]] ; then
      open https://store.steampowered.com/about/
    fi

    if ! [[ -e /usr/bin/slack ]] ; then
      open https://slack.com/downloads/linux
    fi

    if ! [[ -e /usr/bin/signal-desktop ]] ; then
      open https://signal.org/download/
    fi

    if [[ `which purevpn` == "" ]] ; then
      open https://my.purevpn.com/apps
    fi

    if [[ `which vagrant` == "" ]] ; then
      open https://www.vagrantup.com/downloads.html
    fi
  fi
fi

if $config_p ; then
  if [[ `which bundle` != "" ]] ; then
    bundle config set jobs 2
  fi

  #
  #  terminfo for emacsclient in a 256-color terminal
  #  see https://github.com/bbatsov/solarized-emacs/issues/18#issuecomment-294374266
  #
  #  see .bashrc for usage but in summary:
  #
  #    TERM=xterm-24bits emacsclient -nw
  #
  if [[ ! -e $HOME/.terminfo/x/xterm-24bits ]] ; then
    cat <<EOF > /tmp/xterminfo.$$
xterm-24bits|xterm with 24-bit direct color mode,
        use=xterm-256color,
        Tc,
        setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
        setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
EOF
    tic -x -o $HOME/.terminfo /tmp/xterminfo.$$
  fi

  if $linux_p && test -n $DISPLAY ; then
    #
    #  cinnamon + gnome config
    #
    gsettings set org.cinnamon.desktop.wm.preferences focus-mode 'sloppy'
    gsettings set org.cinnamon.desktop.wm.preferences num-workspaces 3

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad tap-to-click false
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click false

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad disable-while-typing true
    gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad horizontal-scrolling true

    gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true
    gsettings set org.gnome.desktop.peripherals.touchpad scroll-method 'two-finger-scrolling'

    gsettings set org.gnome.libgnomekbd.keyboard options "['Compose key\tcompose:ralt', 'caps\tcaps:ctrl_modifier']"

    gsettings set org.cinnamon.settings-daemon.peripherals.mouse locate-pointer true

    gsettings set org.cinnamon.desktop.keybindings.wm toggle-maximized "['<Alt>F10', '<Alt><Super>Up']"
    gsettings set org.cinnamon.desktop.keybindings.wm minimize "['<Alt><Super>Down']"

    # move alt-space keybinding from "window menu" to rofi
    gsettings set org.cinnamon.desktop.keybindings.wm activate-window-menu "[]"
    dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/command "'rofi-launcher'"
    dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/name "'rofi-launcher'"
    dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/binding "['<Alt>space']"
    dconf write /org/cinnamon/desktop/keybindings/custom-list "['rofi-binding']"
  fi

  if $linux_p ; then
    #
    #  deep sleep
    #  https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    #
    GRUB_FILE=/etc/default/grub
    if ! fgrep mem_sleep_default $GRUB_FILE ; then
      echo -e "\n***\n*** please update $GRUB_FILE to have 'mem_sleep_default=deep' in GRUB_CMDLINE_LINUX_DEFAULT\n***"
      open https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    fi
  fi
fi


set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
