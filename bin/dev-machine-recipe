#! /usr/bin/env bash
#
# __Encrypted LVM help__
#
#   https://help.ubuntu.com/community/ResizeEncryptedPartitions
#
# __Recommended disk config__
#
# root - 20GB ext4
# swap - 8GB - 16GB swap
# home - whatever's left ext4
#
# __Recovering from a complete loss__
#
# 1. set CapsLock to Ctrl, compose key to right-alt, set sloppy window focus
# 2. recover ssh keys
# 3. `sudo apt-get install git ruby rake`
# 4. clone dotfiles repo, run setup, re-login
# 5. run `dev-machine-setup`
# 6. set up gnome-do keybinding
# 7. set up chrome profiles
# 8. clone emacs.d repo, run rake
# 9. set up dropbox to Shared
# 10. symlink Documents → Shared/Dropbox/Mike
# 11. symlink Music/Library → Shared/Dropbox/Music
# 12. background images from Documents/Pictures/Desktop\ Backgrounds
# 13. install cinnamon applet "slideshow"
# 14. add cinnamon applet: system monitor
# 15. install rvm
# 16. add quake and devilspie2 to startup applications
#
#
# __More Things__
#
# - set up alternative chrome profiles
#   - goruco
#   - lostatpivotal
#   - mario pivotalio
# - configure Pivotal VPN
# - configure PureVPN VPN
# - check out other code
#
# fido u2f key: http://sk.plug-up.com/
#
# To use your key on Linux, you must allow your account to access
# it. For this, you simply need to add a udev rule for the
# device. Create a file named /etc/udev/rules.d/10-security-key.rules
# with this content:
#
# SUBSYSTEMS=="usb", ATTRS{idVendor}=="2581", ATTRS{idProduct}=="f1d0", MODE="0660", GROUP="plugdev"
#
# and then `sudo udevadm trigger`
#

set -o errexit
set -o xtrace

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

if $linux_p ; then
  install="sudo apt-get install -y -q"
  update="sudo apt-get update -q"
  open="gnome-open"
elif $apple_p ; then
  install="brew install"
  update="brew update"
  open="open"
  if [[ `which brew` == "" ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
fi

#  update
${update}

if $linux_p ; then
  ${install} gnupg
elif $darwin_p ; then
  ${install} gpg
fi

# rvm
if [[ `which rvm` == "" ]] ; then
  gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
  curl -sSL https://get.rvm.io | bash -s stable
fi

if [[ `which bundle` != "" ]] ; then
  bundle config jobs 2
fi

if $linux_p ; then
  #  basics for usability
  ${install} \
    gnome-do gnome-do-plugins \
    gcolor2 \
    keepassx \
    msttcorefonts \
    gconf-editor \
    xclip
  #    istanbul \

  # if [[ `which google-chrome-beta` == "" ]] ; then
  #     ${open} https://www.google.com/intl/en/chrome/browser/beta.html
  # fi

  if [[ `which google-chrome-stable` == "" ]] ; then
    ${open} https://www.google.com/intl/en/chrome/browser/desktop/index.html
  fi

  #  things I like for my desktop
  ${install} \
    terminator \
    devilspie2 \
    guake

  # music player -- instead install from source?
  #     clementine \


  #  basics for development and related activities
  ${install} \
    git-core gitk subversion mercurial bzr \
    build-essential valgrind \
    emacs24 autocutsel puppet-el \
    markdown node-marked\
    mariadb-server mariadb-client libmysqlclient-dev \
    postgresql postgresql-client libpq-dev postgresql-contrib \
    openjdk-8-jdk \
    ack-grep \
    curl wget \
    cmake autoconf libtool \
    libpcre++0v5 libpcre++-dev libevent-dev \
    libssl-dev libcrypto++-dev \
    libreadline-dev \
    libxml2 libxml2-dev libxslt1.1 libxslt-dev \
    libyajl-dev libyaml-dev \
    colordiff \
    zip

  #  less-basic stuff for LicenseFinder development
  ${install} \
    npm maven gradle rebar

  if [[ ! -e /usr/bin/node ]] ; then
    # https://github.com/joyent/node/issues/3911
    echo "symlinking node -> nodejs"
    sudo ln -s /usr/bin/nodejs /usr/bin/node
  fi

  if [[ `which bower` == "" ]] ; then
    sudo npm install -g bower
  fi

  if [[ `which pip` == "" ]] ; then
    ${install} python-pip python-dev
    sudo pip install --upgrade pip 
    sudo pip install --upgrade virtualenv 
  fi

  #  ugh, more esoteric stuff for libmagick
  ${install} \
    libmagickcore-dev libmagick++-dev

  #  reading mac drives, encrypted drives, vpn, bootable drives, etc.
  ${install} \
    hfsprogs cryptsetup \
    network-manager-openvpn-gnome \
    gufw \
    unetbootin

  #  virtualbox
  ${install} \
    virtualbox-qt virtualbox-dkms \
    nfs-common nfs-kernel-server

  #if [[ `which vagrant` == "" ]] ; then
  #  ${open} https://www.vagrantup.com/downloads.html
  #fi

  #  dnsmasq
  ${install} dnsmasq

  #  skype
  ${install} \
    skype ia32-libs

  #  miscellaneous
  ${install} \
    htop \
    remmina remmina-plugin-rdp

  # heroku toolbelt
  if [[ `which heroku` == "" ]] ; then
    wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
  fi

  # flux
  if [[ `which fluxgui` == "" ]] ; then
    # Install dependencies
    ${install} python-appindicator python-xdg python-pexpect python-gconf python-gtk2 python-glade2 libxxf86vm1

    FLUXD="${HOME}/code/oss/xflux-gui"
    if [[ ! -d $FLUXD ]] ; then
	    pushd $(dirname $FLUXD)
  	    git clone "https://github.com/xflux-gui/xflux-gui.git"
	    popd
    fi
    pushd $FLUXD
      python download-xflux.py
      sudo python setup.py install # install globally
      #python setup.py install --user # install in your home directory
      (fluxgui 2>&1 > /dev/null &)
    popd
  fi

  # dropbox
  ${install} dropbox python-gpgme

  # cinnamon system monitor
  ${install} gir1.2-gtop-2.0

  # docker
  if [[ `which docker` == "" ]] ; then
    echo "FAIL: install docker, please"
    ${open} https://docs.docker.com/engine/installation/ubuntulinux/
    exit 1
  else
    echo "checking that docker was installed correctly ..."
    docker run hello-world

    ## only necessary if home is a separate partition from root or var
    # echo "checking for alternate docker cache ..."
    # if fgrep DOCKER_OPTS /etc/default/docker | fgrep -e "-g" ; then
    #   echo "docker cache is OK!"
    # else
    #   echo "FAIL: docker is using the default cache directory"
    #   echo "FAIL: edit /etc/default/docker to set '-g /home/docker' in DOCKER_OPTS"
    #   ${open} https://forums.docker.com/t/how-do-i-change-the-docker-image-installation-directory/1169
    #   exit 1
    # fi
  fi

  #
  # lenovo thinkpad section
  #
  if inxi -M | egrep "X2[0-9]0" 2>&1 > /dev/null ; then # x250/x230

    # micmute - http://www.thinkwiki.org/wiki/Microphone_Mute_Button
    if [[ ! -e /etc/acpi/lenovo-mutemic.sh ]] ; then
      echo "CREATING: /etc/acpi/lenovo-mutemic.sh"
      cat > /tmp/lenovo-mutemic.sh <<EOF
#!/bin/bash

if [[ \$(amixer sget Capture) == *"[on]"* ]]; then
  amixer sset Capture nocap
else
  amixer sset Capture cap
fi
EOF
      chmod +x /tmp/lenovo-mutemic.sh
      sudo mv /tmp/lenovo-mutemic.sh /etc/acpi
    fi

    if [[ ! -e /etc/acpi/events/lenovo-mutemic ]] ; then
      echo "CREATING: /etc/acpi/lenovo-mutemic"
      cat > /tmp/lenovo-mutemic <<EOF
event=button/prog1 PROG1 00000080 00000000 K
action=/etc/acpi/lenovo-mutemic.sh
EOF
      sudo mv /tmp/lenovo-mutemic /etc/acpi/events
      sudo service acpid restart
    fi

  fi # x250/x230

  # lenovo usb keyboard section

  echo "checking for thinkpad usb keyboard ..."
  TPKB="ThinkPad Compact USB Keyboard"
  if xinput list | egrep "${TPKB}.*pointer" ; then
    kbid=$(xinput list | egrep "${TPKB}.*pointer" | cut -f2 | cut -d= -f2)
    echo "disabling middle-click paste ..."
    xinput set-button-map ${kbid} 1 0 3
  fi


  # cinnamon
  gsettings set org.cinnamon number-workspaces 3
fi

set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
