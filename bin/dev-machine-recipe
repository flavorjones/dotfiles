#! /usr/bin/env bash
#
# Recovering From A Complete Loss
# ===============================
#
# High Priority
# -------------
#
# 1. set CapsLock to Ctrl, compose key to right-alt, set sloppy window focus
# 2. recover ssh keys - use krypton!! https://krypt.co/
# 3. `sudo apt-get install git ruby rake`
# 4. clone dotfiles repo, run setup, re-login
# 5. run `dev-machine-recipe` (this script!)
# 6. clone emacs.d repo, run rake
# 7. set up dropbox
# 8. symlink Documents → Dropbox/Mike
# 9. set up gnome-do keybinding
# 10. set up chrome profiles
# 11. add guake and devilspie2 to startup applications
# 12. add cinnamon applet: "Multi-Core System Monitor"
#
# Medium Priority
# --------------
#
# 1. configure timeshift backups
# 2. install gvm
# 3. install cxoffice and microsoft office stuff
#
# Low Priority
# ------------
#
# 1. set background images from Documents/Pictures/Desktop\ Backgrounds
# 2. desktop config (you should really automate this, too)
#
#
# Disk Help
# =========
#
# Mostly out of date these days, instead use the default LVM partitioning.
#
# Encrypted LVM help
# ------------------
#
# https://help.ubuntu.com/community/ResizeEncryptedPartitions
#
# Recommended disk config if you're going to fiddle
# -------------------------------------------------
#
# root - 20GB ext4
# swap - 8GB - 16GB swap
# home - whatever's left ext4
#
#
# Input Font config
# =================
#
#   https://input.fontbureau.com/
#
#   config:
#     Alternates
#     	--asterisk=height
#     	--g=ss
#     	--i=serifs
#     	--l=serifs_round
#    
#     Line Height: 1.2×
#
#
#  Diagnosing sleep problems / power states
#  ====================
#
#  Resources
#  --------------------
#
#  - "System Power Management Sleep States" https://www.kernel.org/doc/Documentation/power/states.txt
#  - https://01.org/blogs/rzhang/2015/best-practice-debug-linux-suspend/hibernate-issues
#  - https://01.org/linuxgraphics/gfx-docs/drm/admin-guide/pm/sleep-states.html

set -o errexit
set -o xtrace

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

install_p=true
config_p=true
if [[ $1 == "config" ]] ; then
  echo "## configuration only"
  install_p=false
fi

kernel_release=$(uname -r)
ossdir="${HOME}/code/oss"

if $linux_p ; then
  install="apt install -y -q"
  update="apt update -q"
  open="gnome-open"
  snap_install="sudo snap install"
  snap_update="sudo snap refresh"
  flatpak_install="flatpak install flathub"
  flatpak_update="flatpak update"
elif $apple_p ; then
  install="brew install"
  update="brew update"
  open="open"
  if [[ `which brew` == "" ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
fi

if $install_p ; then
  ${update}
  ${snap_update}
  ${flatpak_update}
fi

if $config_p ; then
  if [[ `which bundle` != "" ]] ; then
    bundle config jobs 2
  fi
fi

if $linux_p ; then
  if $install_p ; then
    #
    #  basic usability
    #
    ${install} \
      gnome-do gnome-do-plugins libgnome2-bin \
      libnotify-bin \
      keepassx \
      gconf-editor dconf-cli \
      xclip \
      tree \
      terminator \
      devilspie2 \
      htop \
      guake \
      cheese \
      pavucontrol \
      gnome-shell-pomodoro

    # see https://bugs.launchpad.net/ubuntu/+source/msttcorefonts/+bug/1713615
    wget http://ftp.de.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.6_all.deb
    sudo dpkg -i ttf-mscorefonts-installer_3.6_all.deb
    apt hold ttf-mscorefonts-installer

    #
    #  gpg
    #
    if $linux_p ; then
      ${install} gnupg
    elif $darwin_p ; then
      ${install} gpg
    fi


    #
    #  rvm
    #
    if [[ `which rvm` == "" ]] ; then
      gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
      curl -sSL https://get.rvm.io | bash -s stable --without-gems="rubygems-bundler"
    fi


    #
    #  basics for development and related activities
    #
    ${install} \
      git-core gitk subversion mercurial bzr \
      direnv \
      build-essential valgrind \
      emacs25 autocutsel \
      markdown node-marked\
      mariadb-server mariadb-client libmysqlclient-dev \
      postgresql postgresql-client libpq-dev postgresql-contrib \
      openjdk-8-jdk \
      ack-grep \
      curl wget \
      cmake autoconf libtool \
      libpcre++0v5 libpcre++-dev libevent-dev \
      libssl-dev libcrypto++-dev \
      libreadline-dev \
      libxml2 libxml2-dev libxslt1.1 libxslt-dev \
      libyajl-dev libyaml-dev \
      libcurl4-openssl-dev \
      colordiff \
      zip \
      jq


    #
    #  cf usage and development
    #
    if [[ `which cf` == "" ]] ; then
      wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      echo "deb http://packages.cloudfoundry.org/debian stable main" | \
        sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      ${update}
      ${install} cf-cli
    fi

    LPASSD="${ossdir}/lastpass-cli"
    if [[ ! -d ${LPASSD} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/lastpass/lastpass-cli"
      popd
    fi
    if [[ `which lpass` == "" ]] ; then
      pushd ${LPASSD}
      make
      sudo make install
      popd
    fi


    #
    #  heroku
    #
    if [[ `which snap` == "" ]] ; then
      ${install} snapd
    fi

    if [[ `which heroku` == "" ]] ; then
      ${snap_install} --classic heroku
    fi

    # #
    # #  licensefinder development
    # #
    # ${install} npm maven gradle rebar

    # if [[ ! -e /usr/bin/node ]] ; then
    #   # https://github.com/joyent/node/issues/3911
    #   echo "symlinking node -> nodejs"
    #   sudo ln -s /usr/bin/nodejs /usr/bin/node
    # fi

    # if [[ `which bower` == "" ]] ; then
    #   npm install -g bower
    # fi

    # if [[ `which pip` == "" ]] ; then
    #   ${install} python-pip python-dev
    #   sudo pip install --upgrade pip
    #   sudo pip install --upgrade virtualenv
    # fi


    #
    #  filesystems, vpn, RDP, bootable drives, backups, etc.
    #
    ${install} \
      hfsprogs cryptsetup \
      network-manager-openvpn-gnome \
      network-manager-vpnc-gnome \
      gufw \
      timeshift \
      remmina remmina-plugin-rdp libfreerdp-plugins-standard remmina-plugin-vnc


    #
    #  dropbox
    #
    ${install} dropbox 


    #
    #  cinnamon system monitor
    #
    ${install} gir1.2-gtop-2.0


    #
    #  virtualbox
    #
    ${install} \
      virtualbox-qt virtualbox-dkms \
      nfs-common nfs-kernel-server


    #
    #  docker
    #
    if [[ `which docker` == "" ]] ; then
      ${install} docker.io
      sudo usermod -a -G docker $USER
    else
      #  this will fail until you re-login to have the above user group take effect
      echo "checking that docker was installed correctly ..."
      docker run hello-world
    fi


    #
    #  graphics, screencaps, etc.
    #
    if [[ `which peek` == "" ]] ; then
      sudo add-apt-repository ppa:peek-developers/stable
      ${update}
      ${install} peek
    fi

    ${install} krita kazam \
               libmagickcore-dev libmagick++-dev

    ${flatpak_install} org.glimpse_editor.Glimpse


    #
    #  power management
    #
    #  http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html
    #  http://linrunner.de/en/tlp/docs/tlp-configuration.html#rdw
    #  TODO: make sure touchscreen is added to USB_WHITELIST in /etc/default/tlp
    #
    ${install} tlp tlp-rdw acpi-call-dkms smartmontools powertop # linux-tools


    # #
    # #  system debugging tools
    # #
    # ${install} linux-tools-common \
    #           linux-tools-generic linux-tools-${kernel_release} \
    #           wireshark \
    #           sysdig


    #
    #  ukuu
    #
    UKUUDIR="${ossdir}/ukuu"
    if [[ ! -d ${UKUUDIR} ]] ; then
      pushd ${ossdir}
      git clone "http://github.com/teejee2008/ukuu.git"
      popd
    fi
    if [[ `which ukuu` == "" ]] ; then
      ${install} libgee-0.8-dev libjson-glib-dev libvte-2.91-dev valac
      pushd ${UKUUDIR}
      git pull
      make all
      sudo make install
    fi

    #
    #  .XCompose unicode input
    #
    XCOMPOSEDIR="${ossdir}/xcompose"
    if [[ ! -d ${XCOMPOSEDIR} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/kragen/xcompose"
      popd
    fi
    ${install} uim


    #
    #  flux-like
    #
    ${install} redshift redshift-gtk


    #
    #  golang stuff
    #
    #  https://johnsogg.github.io/emacs-golang
    #
    if [[ "$GOPATH" != "" ]] ; then
      go get -u golang.org/x/tools/cmd/...
      go get -u github.com/rogpeppe/godef/...
      go get -u github.com/nsf/gocode
      go get -u golang.org/x/tools/cmd/goimports
      go get -u golang.org/x/tools/cmd/guru
      go get -u github.com/dougm/goflymake

      rm ${GOPATH}/bin/bundle
    fi


    # #
    # #  starship bash prompt
    # #
    # if [[ `which starship` == "" ]] ; then
    #   wget -q --show-progress https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
    #   tar xvf starship-x86_64-unknown-linux-gnu.tar.gz
    #   mv starship ${HOME}/local/bin/
    # fi


    #
    #  chrome. pick one!
    #
    # if [[ `which google-chrome-beta` == "" ]] ; then
    #     ${open} https://www.google.com/intl/en/chrome/browser/beta.html
    # fi
    if [[ `which google-chrome-stable` == "" ]] ; then
      ${open} https://www.google.com/intl/en/chrome/browser/desktop/index.html
    fi


    #
    #  things i have to manually install (pending further automation)
    #
    if ! [[ -e /opt/zoom/ZoomLauncher ]] ; then
      ${open} https://zoom.us/download
    fi

    if [[ `which discord` == "" ]] ; then
      ${open} https://discordapp.com/download
    fi

    if [[ `which steam` == "" ]] ; then
      ${open} https://store.steampowered.com/about/
    fi

    if [[ `which gitter` == "" ]] ; then
      ${open} https://gitter.im/apps
    fi

    if ! [[ -e /usr/bin/slack ]] ; then
      ${open} https://slack.com/downloads/linux
    fi

    if ! [[ -e /usr/bin/signal-desktop ]] ; then
      ${open} https://signal.org/download/
    fi

    if [[ `which purevpn` == "" ]] ; then
      ${open} https://my.purevpn.com/apps
    fi
  fi


  if $config_p ; then
    #
    #  cinnamon + gnome config
    #
    gsettings set org.cinnamon.desktop.wm.preferences focus-mode 'sloppy'
    gsettings set org.cinnamon.desktop.wm.preferences num-workspaces 3

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad tap-to-click false
    gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click false

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad disable-while-typing true
    gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true

    gsettings set org.cinnamon.settings-daemon.peripherals.touchpad horizontal-scrolling true

    gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true
    gsettings set org.gnome.desktop.peripherals.touchpad scroll-method 'two-finger-scrolling'

    gsettings set org.gnome.libgnomekbd.keyboard options "['Compose key\tcompose:ralt', 'caps\tcaps:ctrl_modifier']"

    gsettings set org.cinnamon.settings-daemon.peripherals.mouse locate-pointer true

    #
    #  gnome-terminal should show up in gnome-do
    #
    GT_DESKTOP_FILE=/usr/share/applications/gnome-terminal.desktop
    if ! fgrep OnlyShowIn $GT_DESKTOP_FILE | fgrep X-Cinnamon ; then
      echo -e "\n***\n*** you must add X-Cinammon to $GT_DESKTOP_FILE property 'OnlyShowIn' ...\n***\n"
    fi

    #
    #  deep sleep
    #  https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    #
    #  note that the xps 9300 also requires bios settings to be turned off ("sign of life"):
    #  https://www.dell.com/community/XPS/XPS-13-9300-Wake-from-sleep/m-p/7535386/highlight/true#M59272
    #
    GRUB_FILE=/etc/default/grub
    if ! fgrep mem_sleep_default $GRUB_FILE ; then
      echo -e "\n***\n*** please update $GRUB_FILE to have 'mem_sleep_default=deep' in GRUB_CMDLINE_LINUX_DEFAULT\n***"
      ${open} https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    fi
  fi
fi

set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
