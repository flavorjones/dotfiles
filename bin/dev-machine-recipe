#! /usr/bin/env bash
#
#  # Starting from a fresh machine
#
#  ## Bootstrap
#
#  Do this first to get basic tools installed to make everything else easier.
#
#  ## High Priority
#
#  1. set CapsLock to Ctrl, compose key to right-alt, set 'mouse' window focus
#  2. recover ssh keys - you have a yubikey, right?
#  3. `sudo apt-get install git ruby rake`
#  4. clone dotfiles repo, run setup, re-login
#  5. run `dev-machine-recipe` (this script!)
#  6. set up dropbox
#  7. symlink Documents → Dropbox/Mike
#  8. set up chrome profiles
#  9. add guake to startup applications
# 10. install 1password
#
#  ## Medium Priority
#
#  1. configure timeshift backups
#     - exclude /root/**
#     - exclude /home/flavorjones/**
#     - exclude /var/lib/docker/**
#  2. firewall rules
#     > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 22 # ssh
#     > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 24800 # synergy/barrier
#  3. create a postgres user role for yourself: `sudo -u postgres createuser -s flavorjones`
#
#  ## Low Priority
#
#  1. Set "Input Settings" to use XIM (see XCompose notes below)
#  2. color: clone https://github.com/Mayccoll/Gogh and install solarized theme for gnome terminal
#  3. color: clone https://github.com/seebi/dircolors-solarized and use the 'ansi-dark' config
#  4. mouse theme for screencasts https://github.com/iPAS/DMZ-White-Highlighted
#
#
#  # Chrome
#
#  ## Chrome Flags
#
#  chrome://flags/#read-later
#  chrome://flags/#enable-tab-search
#  chrome://flags/#tab-groups-collapse
#  chrome://flags/#tab-groups-auto-create
#  chrome://flags/#tab-groups-collapse-freezing
#
#
#  ## Chrome Extensions
#
#  [Simplify Gmail](https://simpl.fyi/)
#  Session Buddy: https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko
#  [Gmail Quick Links - Chrome Web Store](https://chrome.google.com/webstore/detail/gmail-quick-links/ecbkcjeoffcjnppapdlncohmehhnfibd/related?hl=en-US)
#  [Copy as Markdown - Chrome Web Store](https://chrome.google.com/webstore/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn/related?hl=en)
#  [AutoplayStopper](https://chromewebstore.google.com/detail/autoplaystopper/ejddcgojdblidajhngkogefpkknnebdh?pli=1)
#  [GhostText](https://chromewebstore.google.com/detail/ghosttext/godiecgffnchndlihlpaajjcplehddca)
#  [AdGuard](https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg)
#  1password
#
#
#  # Dell XPS
#
#  ## xps 9320 (2023) BIOS settings
#
#  Press F2 at boot menu to enter BIOS
#
#  sudo apt install oem-somerville-tentacool-meta
#
#
#  ## xps 9300 (2020) BIOS settings
#
#  OMG BIOS settings can get changed when the battery discharges, WTF
#
#  Make sure you set the disk controller to AHCI (may get set to RAID, that's bad)
#  - https://forums.linuxmint.com/viewtopic.php?t=322351
#
#  Turn off "Sign of Life" which will interfere with resume-from-suspend
#  - https://www.dell.com/community/XPS/XPS-13-9300-Wake-from-sleep/m-p/7535386/highlight/true#M59272
#
#
#  # Linux
#
#  ## Encrypted LVM help
#
#  https://help.ubuntu.com/community/ResizeEncryptedPartitions
#
#
#  ## Diagnosing sleep problems / power states
#
#  - "System Power Management Sleep States" https://www.kernel.org/doc/Documentation/power/states.txt
#  - https://01.org/blogs/rzhang/2015/best-practice-debug-linux-suspend/hibernate-issues
#  - https://01.org/linuxgraphics/gfx-docs/drm/admin-guide/pm/sleep-states.html
#
#
#  ## Use a more-modern lowlatency kernel
#
#  There's usually a meta-package, like `linux-lowlatency-hwe-20.04-edge` that will keep you up to
#  date with the latest lowlatency kernel. You can poke around with `apt-cache search lowlatency`
#
#  Otherwise, install a specific version with `apt install --install-suggests linux-image-5.8.0-31-lowlatency`
#
#
#  ## Multi-Monitor Settings
#
#  What seems to work best is HiDPI (200%) on external monitors, and 50% fractional scaling on the laptop LCD.
#
#  In the past, with two different resolution monitors, you had used fractional scaling across
#  monitors (hi-res monitor at 175%, low-res at 125%), but it wasn't always a good size and there
#  were some bugs with chrome performance:
#  https://askubuntu.com/questions/1274719/chrome-menus-too-slow-after-enabling-fractional-scaling-in-ubuntu-20-04
#
#  Use something like `xrandr --output DP-3 --pos 1728x303` to position the wide
#     monitor to the right of the tall narrow monitor. (0,0) is the top left of the virtual desktop.
#     with cinnamon, you can edit ~/.config/cinnamon-monitors.xml to make this permanent.
#
#  to fix cursor flickering on hidpi monitor. run `xrandr --output DP-3 --scale 0.9999x0.9999`
#
#
#  # Mac Setup
#
#  Fonts:
#  - https://www.jetbrains.com/lp/mono/
#
#  Window resizing and tiling: use https://rectangleapp.com/ and default keys
#  (previously you had used ShiftIt and before that SizeUp)
#
#  Install iterm2, set profile color to Solarized Dark, set font to JetBrains Mono
#
#  Change shell to bash and add "source ~/.bashrc" to ~/.profile
#
#  Iterm2 key bindings (forward-word, backward-word, delete-word)
#  - https://apple.stackexchange.com/a/204802/169366o
#
#  Iterm2 shell integration
#  - https://iterm2.com/documentation-shell-integration.html
#
#  To stop horizontal scrolling from being interpreted as "back in history" in Chrome:
#    System Prefs → Trackpad → More Gestures → turn off "Swipe between pages"
#
#  Emacs needs to be granted access to ~/Documents
#  - https://apple.stackexchange.com/questions/371888/restore-access-to-file-system-for-emacs-on-macos-catalina
#
#  Emacs: configure browse-url to use mac default browser
#
#  Other random help: https://gist.github.com/SeppoTakalo/f526f761a44f07464cb5df89c8a9389e
#
#  If you want to connect the bluetooth trackpoint keyboard, you'll need to figure out something for
#  enabling middle-click scrolling.
#  - https://medium.com/@takezoe/thinkpad-bluetooth-wireless-keyboard-with-macbook-7a911ed77c28 points at https://github.com/pqrs-org/Karabiner-Elements
#
#
#  # Input Font config
#
#    https://input.fontbureau.com/
#
#    config:
#      Alternates
#        --asterisk=height
#        --g=ss
#        --i=serifs
#        --l=serifs_round
#
#      Line Height: 1.2×
#
#
set -o errexit
set -o xtrace

UBUNTU_CODENAME="mantic"

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

install_p=true
config_p=true
update_p=true
clean_p=false
bootstrap_p=false
if [[ $1 == "config" ]] ; then
  echo "## configuration only"
  install_p=false
  update_p=false
elif [[ $1 == "update" ]] ; then
  echo "## update only"
  install_p=false
  config_p=false
elif [[ $1 == "clean" ]] ; then
  echo "## cleaning"
  install_p=false
  config_p=false
  update_p=false
  clean_p=true
elif [[ $1 == "bootstrap" ]] ; then
  echo "## bootstrapping"
  install_p=false
  config_p=false
  update_p=false
  bootstrap_p=true
fi

kernel_release=$(uname -r)
HOME_LOCAL="${HOME}/local"
ossdir="${HOME}/code/oss"
bashrc_local="${HOME}/.bashrc_local"

if $linux_p ; then
  function apt_install {
    sudo apt install -y -q $*
  }
  function apt_update {
    sudo apt update -q
  }
  function apt_upgrade {
    apt_update
    sudo apt upgrade -y -q
  }

  function firmware_upgrade {
    fwupdmgr refresh --force
    (fwupdmgr get-updates && fwupdmgr update) || true
  }

  function open {
    xdg-open $*
  }

  # delete with `snap uninstall` or `snap uninstall --purge`
  # delete old snapshots with `snap forget <id>`
  function snap_install {
    sudo snap install $*
  }
  function snap_upgrade {
    sudo snap refresh
  }

  function flatpak_install {
    flatpak install -y flathub $*
  }
  function flatpak_upgrade {
    flatpak update
  }

  if $install_p || $update_p ; then
    if [[ `which snap` == "" ]] ; then
      apt_install snapd
    fi

    if [[ `which flatpak-builder` == "" ]] ; then
      apt_install flatpak-builder
    fi
  fi

elif $apple_p ; then
  function brew_install {
    brew install $*
  }
  function brew_update {
    brew update
    brew upgrade
  }

  if [[ `which brew` == "" ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
fi

if $update_p ; then
  if $apple_p ; then
    brew_update
  fi
  if $linux_p ; then
    firmware_upgrade
    apt_upgrade
    snap_upgrade
    flatpak_upgrade
  fi
fi

if $install_p || $bootstrap_p ; then
  if $linux_p ; then
    apt_install \
       build-essential cmake autoconf libtool \
       git-core ruby rake curl wget

    # sharing keyboard and mouse (synergy / barrier / input-leap)
    #
    # on client systems make sure you're using X11 not wayland (/etc/gdm3/custom.conf)
    # but once input-leap supports wayland, we should try that instead.
    apt_install barrier
    BARRIER_SSL_CONFIG_DIR="${HOME}/.local/share/barrier/SSL"
    if [[ ! -f "${BARRIER_SSL_CONFIG_DIR}/Barrier.pem" ]] ; then
      mkdir -p "${BARRIER_SSL_CONFIG_DIR}"
      pushd "${BARRIER_SSL_CONFIG_DIR}"
      openssl req -x509 -nodes -days 365 -subj /CN=Barrier -newkey rsa:4096 -keyout Barrier.pem -out Barrier.pem
      popd
    fi

    # key management
    #
    # - https://tenderlovemaking.com/2021/10/26/publishing-gems-with-your-yubikey.html
    # - https://docs.yubico.com/software/yubikey/tools/ykman/Install_ykman.html#linux
    if [[ `which ykman` == "" ]] ; then
      sudo apt-add-repository ppa:yubico/stable
      apt_update
      apt_install pcscd gnupg2 scdaemon yubikey-manager
    fi
  fi
fi


if $install_p ; then
  if $apple_p ; then
    brew_install \
      ack \
      coreutils \
      direnv \
      gpg \
      htop \
      ispell \
      marked \
      pkg-config libxml2 libxslt \
      ruby ruby-build \
      starship \
      tmate \
      direnv \
      bat \
      hexyl

    brew_install --cask emacs --no-quarantine
    brew_install --cask keycastr
    brew_install --cask rectangle

    brew tap dimentium/autoraise
    brew_install autoraise --with-dexperimental_focus_first
    brew services start autoraise
  fi

  if $linux_p ; then
    #
    #  basic usability
    #
    apt_install \
      libnotify-bin \
      dconf-editor dconf-cli \
      xclip \
      tree \
      terminator \
      htop \
      guake \
      cheese \
      pavucontrol \
      gnome-applets gnome-shell-pomodoro

    #
    #  fonts
    #
    apt_install fonts-cmu

    # # see https://bugs.launchpad.net/ubuntu/+source/msttcorefonts/+bug/1713615
    # wget -c http://ftp.de.debian.org/debian/pool/contrib/m/msttcorefonts/ttf-mscorefonts-installer_3.6_all.deb
    # sudo dpkg -i ttf-mscorefonts-installer_3.6_all.deb
    # apt hold ttf-mscorefonts-installer

    # basics for development and related activities
    apt_install \
      gitk subversion mercurial bzr \
      valgrind \
      direnv \
      autocutsel \
      universal-ctags \
      mariadb-server mariadb-client libmysqlclient-dev \
      postgresql postgresql-client libpq-dev postgresql-contrib \
      openjdk-21-jdk \
      ack-grep \
      colordiff \
      markdown \
      jq \
      libevent-dev \
      libssl-dev libcrypto++-dev \
      libreadline-dev \
      libxml2 libxml2-dev libxslt1.1 libxslt-dev \
      libyajl-dev libyaml-dev \
      libcurl4-openssl-dev \
      zip \
      python3 python-is-python3 \
      graphviz gv \
      bat hexyl

    # apt_install redshift redshift-gtk geoclue-2.0 geoclue-2-demo

    # snap_install insomnia # REST client

    # # better sound hardware management
    # # https://yktoo.com/en/software/sound-switcher-indicator/
    # if [[`which indicator-sound-switcher` == ""]] ; then
    #   sudo apt-add-repository ppa:yktooo/ppa
    #   apt_update
    #   apt_install indicator-sound-switcher
    # fi

    # #  heroku
    # if [[ `which heroku` == "" ]] ; then
    #   snap_install --classic heroku
    # fi

    #  github cli
    if [[ `which gh` == "" ]] ; then
      apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
      sudo apt-add-repository https://cli.github.com/packages
      apt_install gh
    fi

    #  filesystems, vpn, RDP, bootable drives, backups, etc.
    apt_install \
      hfsprogs cryptsetup \
      network-manager-openvpn-gnome \
      network-manager-vpnc-gnome \
      gufw \
      timeshift

    apt_install dropbox

    # # #  virtualbox
    # #    wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --dearmor --yes --output /usr/share/keyrings/oracle-virtualbox-2016.gpg
    # #    deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian ${UBUNTU_CODENAME} contrib
    # apt_install \
    #   virtualbox-7.0 \
    #   nfs-common nfs-kernel-server

    #  docker
    if [[ `which docker` == "" ]] ; then
      open "https://docs.docker.com/engine/install/debian/#install-using-the-repository"
      # apt_install docker.io
      # sudo usermod -a -G docker $USER
    else
      #  this will fail until you re-login to have the above user group take effect
      echo "checking that docker was installed correctly ..."
      docker run hello-world
    fi

    # #  graphics, screencaps, video and sound recording, etc.
    # apt_install sox libsox-fmt-mp3 \
    #            krita kazam gnome-sound-recorder \
    #            libmagickcore-dev libmagick++-dev \
    #            v4l2loopback-dkms v4l2loopback-utils \
    #            peek
    # flatpak_install org.gimp.GIMP
    # snap_install shotcut

    # # from https://github.com/snapcrafters/obs-studio
    # #
    # # use the flatpak, not the snap, because it renders better with
    # # hidpi as of 2020-07. also it seems to be better supported.
    # #
    # # if the virtual camera isn't working, try a "modprobe -r" /
    # # "modprobe" cycle on v4l2loopback
    # #
    # # for installing the v4l2sink extension support, see:
    # #
    # # > https://github.com/flathub/com.obsproject.Studio/issues/65#issuecomment-657221604
    # #
    # # but note that the `sirn` branch has been updated since then, so you'll need SDK 5.15 and need
    # # to use the YML file.
    # if [[ ! -e /etc/modprobe.d/v4l2loopback.conf ]] ; then
    #   echo "options v4l2loopback devices=1 video_nr=63 card_label=VirtualCam exclusive_caps=1" \
    #     | sudo tee /etc/modprobe.d/v4l2loopback.conf
    # fi
    # if [[ ! -e /etc/modules-load.d/v4l2loopback.conf ]] ; then
    #   echo "v4l2loopback" \
    #     | sudo tee /etc/modules-load.d/v4l2loopback.conf
    # fi
    # flatpak_install com.obsproject.Studio


    #  power management
    #
    #  http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html
    #  http://linrunner.de/en/tlp/docs/tlp-configuration.html#rdw
    #  TODO: make sure touchscreen is added to USB_WHITELIST in /etc/default/tlp
    apt_install tlp tlp-rdw acpi-call-dkms smartmontools powertop


    # #
    # #  system debugging tools
    # #
    # apt_install linux-tools-common \
    #           linux-tools-generic linux-tools-${kernel_release} \
    #           wireshark \
    #           sysdig


    #
    #  WAIT!!! Before doing the below on a fresh system - install
    #  gnome-tweaks and see if setting Keyboard → Compose Key to Right
    #  Alt works without having to do the XIM bit. Maybe yes, maybe
    #  no, but worth a try.
    #
    #  --------------------
    #
    #  .XCompose unicode input
    #
    #  Note that in order to get the custom .XCompose bindings to work
    #  in some applications, I've needed to go to "System Settings" →
    #  "Input Method" and set it to XIM. And then logout/login. IBus
    #  doesn't seem to work in:
    #
    #  - google-chrome
    #  - gnome-terminal
    #  - electron apps (like signal-desktop)
    #
    #  ----
    #
    #  2023-02 japanese notes - the following instructions end up conflicting with emacs, so
    #  probably don't do it unless you're going to invest a chunk of time to figure it all out.
    #
    #  Some resources:
    #  - [#958784 - emacs: Compose key fails with "<Multi\_key> is undefined" if XMODIFIERS is set - Debian Bug report logs](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=958784)
    #  - [JapaneseEnvironmentE - Debian Wiki](https://wiki.debian.org/JapaneseEnvironmentE)
    #  - [key bindings - Compose key in Emacs: <Multi\_key> is undefined - Emacs Stack Exchange](https://emacs.stackexchange.com/questions/3650/compose-key-in-emacs-multi-key-is-undefined)
    #
    #  Here are the instructions I wrote down in 2022-12:
    #
    # >  go to "input method" and follow the instructions to get set up with Fcitx, and use
    # >  ctrl-space to switch.
    # >
    # >  it works in the gnome text editor, terminal, and chrome.
    # >
    # >  to get it to work in emacs, try setting LC_CTYPE=ja_JP.UTF-8
    #
    XCOMPOSEDIR="${ossdir}/xcompose"
    if [[ ! -d ${XCOMPOSEDIR} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/kragen/xcompose"
      popd
    fi

    #  rbenv + ruby-build
    if [[ ! -d $HOME/.rbenv ]] ; then
      git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    else
      (cd $HOME/.rbenv && git pull)
    fi
    if [[ ! -d $HOME/.rbenv/plugins/ruby-build ]] ; then
      mkdir -p $HOME/.rbenv/plugins
      git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
    else
      (cd $HOME/.rbenv/plugins/ruby-build && git pull)
    fi

    #  node (pronounced like seinfeld pronounces "newman")
    if [[ ! -d ${ossdir}/nvm ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/nvm-sh/nvm"
      popd
    fi
    if ! fgrep NVM_DIR ${bashrc_local} ; then
      cat <<EOF >> ${bashrc_local}
# nvm - added by $0
export NVM_DIR="${ossdir}/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
EOF
    fi

    # rust version manager
    snap_install rustup

    #  starship bash prompt
    if [[ `which starship` == "" ]] ; then
      wget -q --show-progress https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
      tar xvf starship-x86_64-unknown-linux-gnu.tar.gz
      mv starship ${HOME_LOCAL}/bin/
    fi

    # # chrome. pick one!
    # if [[ `which google-chrome-beta` == "" ]] ; then
    #     open https://www.google.com/intl/en/chrome/browser/beta.html
    # fi
    if [[ `which google-chrome-stable` == "" ]] ; then
      open https://www.google.com/intl/en/chrome/browser/desktop/index.html
    fi

    #
    #  things i have to manually install (pending further automation)
    #
    if ! [[ -e /opt/zoom/ZoomLauncher ]] ; then
      open https://zoom.us/download
    fi

    if [[ `which discord` == "" ]] ; then
      open https://discordapp.com/download
    fi

    if [[ `which steam` == "" ]] ; then
      snap_install steam
    fi

    if ! [[ -e /usr/bin/slack ]] ; then
      open https://slack.com/downloads/linux
    fi

    if ! [[ -e /usr/bin/signal-desktop ]] ; then
      open https://signal.org/download/
    fi

    if ! [[ `which emacs` == "" ]] ; then
      # install at least 29.1
      open https://www.gnu.org/software/emacs/download.html
    fi

    # if [[ `which purevpn` == "" ]] ; then
    #   open https://my.purevpn.com/apps
    # fi

    # if [[ `which vagrant` == "" ]] ; then
    #   open https://www.vagrantup.com/downloads.html
    # fi
  fi
fi

if $config_p ; then
  if [[ `which bundle` != "" ]] ; then
    bundle config set jobs 4
  fi

  #
  #  terminfo for emacsclient in a 256-color terminal
  #  see https://github.com/bbatsov/solarized-emacs/issues/18#issuecomment-294374266
  #
  #  see .bashrc for usage but in summary:
  #
  #    TERM=xterm-24bits emacsclient -nw
  #
  if [[ ! -e $HOME/.terminfo/x/xterm-24bits ]] ; then
    cat <<EOF > /tmp/xterminfo.$$
xterm-24bits|xterm with 24-bit direct color mode,
        use=xterm-256color,
        Tc,
        setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
        setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
EOF
    tic -x -o $HOME/.terminfo /tmp/xterminfo.$$
  fi

  # if $linux_p && test -n "$DISPLAY" ; then
  #   #
  #   #  cinnamon + gnome config
  #   #
  #   gsettings set org.cinnamon.desktop.wm.preferences focus-mode 'mouse'
  #   gsettings set org.cinnamon.desktop.wm.preferences num-workspaces 4

  #   gsettings set org.cinnamon.desktop.peripherals.touchpad tap-to-click false
  #   gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click false

  #   gsettings set org.cinnamon.desktop.peripherals.touchpad disable-while-typing true
  #   gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true

  #   gsettings set org.cinnamon.desktop.peripherals.touchpad two-finger-scrolling-enabled true
  #   gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true

  #   gsettings set org.gnome.libgnomekbd.keyboard layouts "['us']"
  #   gsettings set org.gnome.libgnomekbd.keyboard options "['Compose key\tcompose:ralt', 'caps\tcaps:ctrl_modifier', 'grp\tgrp:shifts_toggle']"

  #   gsettings set org.cinnamon.desktop.peripherals.mouse locate-pointer true

  #   gsettings set org.cinnamon.desktop.keybindings.wm toggle-maximized "['<Alt>F10', '<Alt><Super>Up']"
  #   gsettings set org.cinnamon.desktop.keybindings.wm minimize "['<Alt><Super>Down']"

  #   # move alt-space keybinding from "window menu" to rofi
  #   gsettings set org.cinnamon.desktop.keybindings.wm activate-window-menu "[]"
  #   dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/command "'rofi-launcher'"
  #   dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/name "'rofi-launcher'"
  #   dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/binding "['<Alt>space']"
  #   dconf write /org/cinnamon/desktop/keybindings/custom-list "['rofi-binding']"
  # fi

  if $linux_p ; then
    #
    #  deep sleep
    #  https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    #
    GRUB_FILE=/etc/default/grub
    if ! fgrep mem_sleep_default $GRUB_FILE ; then
      echo -e "\n***\n*** please update $GRUB_FILE to have 'mem_sleep_default=deep' in GRUB_CMDLINE_LINUX_DEFAULT\n***"
      open https://askubuntu.com/questions/1029474/ubuntu-18-04-dell-xps13-9370-no-longer-suspends-on-lid-close
    fi
  fi
fi

if $clean_p ; then
  if $linux_p ; then
    # clean snap
    sudo snap list --all | awk '/disabled/{print $1, $3}' |
      while read snapname revision; do
        sudo snap remove "$snapname" --revision="$revision"
      done

    # clean flatpak
    flatpak uninstall -y --unused
    sudo flatpak uninstall -y --unused

    docker system prune --all --force
    docker volume prune --all --force
  fi
fi

set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
