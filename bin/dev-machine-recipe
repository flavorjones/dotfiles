#! /usr/bin/env bash
#
#  # Starting from a fresh machine
#
#  ## Bootstrap
#
#  Do this first to get basic tools installed to make everything else easier.
#
#      sudo apt install git-core
#      git clone https://github.com/flavorjones/dotfiles
#      dotfiles/bin/dev-machine-recipe bootstrap
#
#  then configure barrier to share keyboard/mouse.
#
#  ## High Priority
#
#  1. run the full `dev-machine-recipe` (this script!)
#  2. install all the apps that require manual intervention
#  3. configure dropbox, and symlink Documents → Dropbox/Mike
#  4. check chrome profiles - regenerate if necessary (probably not necessary?)
#  5. set up fingerprint reader (Settings → Users → Fingerprint Login)
#  6. set up the yubikey: obsidian://open?vault=flavorjones&file=Personal%2FEncryption%20keys
#     - PGP
#       - `gpg --card-status` and make sure PGP keys are imported
#       - configure .gitconfig for signing commits
#     - SSH
#       - add to bashrc local: export SSH_AUTH_SOCK=${XDG_RUNTIME_DIR}/gnupg/S.gpg-agent.ssh
#       - copy any existing public/private ssh files (ecdsa files for yubikey), or generate new ones
#     - TOTP
#       - test it
#
#  ## Medium Priority
#
#  1. configure timeshift backups
#     - exclude /root/**
#     - exclude /home/flavorjones/**
#     - exclude /var/lib/docker/**
#  2. firewall rules for incoming connections
#     > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 22 # ssh
#     > sudo ufw allow from 192.168.86.0/24 proto tcp to any port 24800 # synergy/barrier
#  3. create a postgres user role for yourself: `sudo -u postgres createuser -s flavorjones`
#  4. add guake to startup applications
#  5. add gTile extension, turn off Tiling Assistant
#  6. https://extensions.gnome.org/extension/1634/resource-monitor/
#     - CPU(% and load average), RAM(GB), net(wlan)
#     - no decimals
#     - align left
#
#  ## Low Priority
#
#  1. configure gnome-terminal to use solarized-dark theme
#     - the default solarized-dark is not good, use Gogh
#     - clone https://github.com/Mayccoll/Gogh and create a profile for "Solarized Dark"
#     - make it the default profile
#     - run this script's "config" command to set up the rest of your terminal defaults
#  2. clone https://github.com/seebi/dircolors-solarized and use the 'ansi-dark' config
#  3. mouse theme for screencasts https://github.com/iPAS/DMZ-White-Highlighted
#
#
#  # Chrome
#
#  ## Chrome Extensions
#
#  [Simplify Gmail](https://simpl.fyi/)
#  Session Buddy: https://chrome.google.com/webstore/detail/session-buddy/edacconmaakjimmfgnblocblbcdcpbko
#  [Gmail Quick Links - Chrome Web Store](https://chrome.google.com/webstore/detail/gmail-quick-links/ecbkcjeoffcjnppapdlncohmehhnfibd/related?hl=en-US)
#  [Copy as Markdown - Chrome Web Store](https://chrome.google.com/webstore/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn/related?hl=en)
#  [AutoplayStopper](https://chromewebstore.google.com/detail/autoplaystopper/ejddcgojdblidajhngkogefpkknnebdh?pli=1)
#  [GhostText](https://chromewebstore.google.com/detail/ghosttext/godiecgffnchndlihlpaajjcplehddca)
#  [AdGuard](https://chromewebstore.google.com/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg)
#  1password
#
#
#  # Dell XPS
#
#  ## xps 9320 (2023) BIOS settings
#
#  Press F2 at boot menu to enter BIOS.
#  I haven't needed to change anything (yet).
#
#
#  ## xps 9300 (2020) BIOS settings
#
#  OMG BIOS settings can get changed when the battery discharges, WTF
#
#  Make sure you set the disk controller to AHCI (may get set to RAID, that's bad)
#  - https://forums.linuxmint.com/viewtopic.php?t=322351
#
#  Turn off "Sign of Life" which will interfere with resume-from-suspend
#  - https://www.dell.com/community/XPS/XPS-13-9300-Wake-from-sleep/m-p/7535386/highlight/true#M59272
#
#
#  # Linux
#
#  ## Encrypted LVM with separate / and /home partitions
#
#  TLDR: see obsidian://open?vault=flavorjones&file=Personal%2FLinux%20disk%20management
#
#
#  ## Diagnosing sleep problems / power states
#
#  - "System Power Management Sleep States" https://www.kernel.org/doc/Documentation/power/states.txt
#  - https://01.org/blogs/rzhang/2015/best-practice-debug-linux-suspend/hibernate-issues
#  - https://01.org/linuxgraphics/gfx-docs/drm/admin-guide/pm/sleep-states.html
#
#
#  ## Use a more-modern lowlatency kernel
#
#  There's usually a meta-package, like `linux-lowlatency-hwe-20.04-edge` that will keep you up to
#  date with the latest lowlatency kernel. You can poke around with `apt-cache search lowlatency`
#
#  Otherwise, install a specific version with `apt install --install-suggests linux-image-5.8.0-31-lowlatency`
#
#
#  ## Multi-Monitor Settings
#
#  What seems to work best is HiDPI (200%) on external monitors, and 50% fractional scaling on the laptop LCD.
#
#  In the past, with two different resolution monitors, you had used fractional scaling across
#  monitors (hi-res monitor at 175%, low-res at 125%), but it wasn't always a good size and there
#  were some bugs with chrome performance:
#  https://askubuntu.com/questions/1274719/chrome-menus-too-slow-after-enabling-fractional-scaling-in-ubuntu-20-04
#
#  Use something like `xrandr --output DP-3 --pos 1728x303` to position the wide
#     monitor to the right of the tall narrow monitor. (0,0) is the top left of the virtual desktop.
#     with cinnamon, you can edit ~/.config/cinnamon-monitors.xml to make this permanent.
#
#  to fix cursor flickering on hidpi monitor. run `xrandr --output DP-3 --scale 0.9999x0.9999`
#
#
#  # Mac Setup
#
#  Fonts:
#  - https://www.jetbrains.com/lp/mono/
#
#  Window resizing and tiling: use https://rectangleapp.com/ and default keys
#  (previously you had used ShiftIt and before that SizeUp)
#
#  Install iterm2, set profile color to Solarized Dark, set font to JetBrains Mono
#
#  Change shell to bash and add "source ~/.bashrc" to ~/.profile
#
#  Iterm2 key bindings (forward-word, backward-word, delete-word)
#  - https://apple.stackexchange.com/a/204802/169366o
#
#  Iterm2 shell integration
#  - https://iterm2.com/documentation-shell-integration.html
#
#  To stop horizontal scrolling from being interpreted as "back in history" in Chrome:
#    System Prefs → Trackpad → More Gestures → turn off "Swipe between pages"
#
#  Emacs needs to be granted access to ~/Documents
#  - https://apple.stackexchange.com/questions/371888/restore-access-to-file-system-for-emacs-on-macos-catalina
#
#  Emacs: configure browse-url to use mac default browser
#
#  Other random help: https://gist.github.com/SeppoTakalo/f526f761a44f07464cb5df89c8a9389e
#
#  If you want to connect the bluetooth trackpoint keyboard, you'll need to figure out something for
#  enabling middle-click scrolling.
#  - https://medium.com/@takezoe/thinkpad-bluetooth-wireless-keyboard-with-macbook-7a911ed77c28 points at https://github.com/pqrs-org/Karabiner-Elements
#
#
#  # Input Font config
#
#    https://input.fontbureau.com/
#
#    config:
#      Alternates
#        --asterisk=height
#        --g=ss
#        --i=serifs
#        --l=serifs_round
#
#      Line Height: 1.2×
#
#
set -o errexit
set -o xtrace

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
  if [[ -f /etc/linuxmint/info ]] ; then
    mint_p=true
  else
    mint_p=false
  fi
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

install_p=true
config_p=true
update_p=true
clean_p=false
bootstrap_p=false
if [[ $1 == "config" ]] ; then
  echo "## configuration only"
  install_p=false
  update_p=false
elif [[ $1 == "update" ]] ; then
  echo "## update only"
  install_p=false
  config_p=false
elif [[ $1 == "clean" ]] ; then
  echo "## cleaning"
  install_p=false
  config_p=false
  update_p=false
  clean_p=true
elif [[ $1 == "bootstrap" ]] ; then
  echo "## bootstrapping"
  install_p=false
  config_p=false
  update_p=false
  bootstrap_p=true
fi

kernel_release=$(uname -r)
HOME_LOCAL="${HOME}/.local"
ossdir="${HOME}/code/bootstrap"
bashrc="${HOME}/.bashrc"

mkdir -p $ossdir

if $linux_p ; then
  function apt_install {
    sudo apt install -y -q $*
  }
  function apt_update {
    sudo apt update -q
  }
  function apt_upgrade {
    apt_update
    sudo apt upgrade -y -q
  }

  function firmware_upgrade {
    fwupdmgr refresh --force
    (fwupdmgr get-updates && fwupdmgr update) || true
  }

  function open {
    xdg-open $*
  }

  # delete with `snap uninstall` or `snap uninstall --purge`
  # delete old snapshots with `snap forget <id>`
  function snap_install {
    sudo snap install $*
  }
  function snap_upgrade {
    sudo snap refresh
  }

  function flatpak_install {
    flatpak install -y flathub $*
  }
  function flatpak_upgrade {
    flatpak update
  }

  if $install_p || $update_p ; then
    if [[ `which snap` == "" ]] ; then
      apt_install snapd
    fi

    if [[ `which flatpak-builder` == "" ]] ; then
      apt_install flatpak-builder
    fi
  fi

elif $apple_p ; then
  function brew_install {
    brew install $*
  }
  function brew_update {
    brew update
    brew upgrade
  }

  if [[ `which brew` == "" ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
fi

if $update_p ; then
  if $apple_p ; then
    brew_update
  fi
  if $linux_p ; then
    firmware_upgrade
    apt_upgrade
    snap_upgrade
    flatpak_upgrade
  fi
fi

if $install_p || $bootstrap_p ; then
  if $linux_p ; then
    apt_install \
       build-essential cmake autoconf libtool \
       git-core ruby rake curl wget \
       clangd bear

    # sharing keyboard and mouse (synergy / barrier / input-leap)
    #
    # on client systems make sure you're using X11 not wayland (/etc/gdm3/custom.conf)
    # but once input-leap supports wayland, we should try that instead.
    # (look at the github actions workflows in input-leap for how to build it)
    apt_install barrier
    BARRIER_SSL_CONFIG_DIR="${HOME}/.local/share/barrier/SSL"
    if [[ ! -f "${BARRIER_SSL_CONFIG_DIR}/Barrier.pem" ]] ; then
      mkdir -p "${BARRIER_SSL_CONFIG_DIR}"
      pushd "${BARRIER_SSL_CONFIG_DIR}"
      openssl req -x509 -nodes -days 365 -subj /CN=Barrier -newkey rsa:4096 -keyout Barrier.pem -out Barrier.pem
      popd
    fi

    # key management
    #
    # - https://tenderlovemaking.com/2021/10/26/publishing-gems-with-your-yubikey.html
    # - https://docs.yubico.com/software/yubikey/tools/ykman/Install_ykman.html#linux
    if [[ `which ykman` == "" ]] ; then
      sudo apt-add-repository ppa:yubico/stable
      apt_update
      apt_install pcscd gnupg2 scdaemon yubikey-manager
    fi

    # emacs - built from source
    #
    # because 22.04 doesn't have emacs 29, wtf man
    if ! command -v emacs &> /dev/null; then
      apt_install libgtk-3-dev libwebkit2gtk-4.0-dev libgif-dev libxpm-dev libgnutls28-dev libncurses-dev

      emacs_version="29.2"
      emacs_file=emacs-${emacs_version}.tar.xz
      emacs_url=http://ftpmirror.gnu.org/emacs/${emacs_file}

      pushd ${ossdir}
      wget -c ${emacs_url}
      tar -xf ${emacs_file}
      pushd emacs-${emacs_version}
      ./configure --prefix=${HOME_LOCAL} --with-cairo --with-xwidgets --with-x-toolkit=gtk3
      make install
      popd
      popd
    fi
  fi
fi


if $install_p ; then
  if $apple_p ; then
    brew_install \
      ack \
      coreutils \
      direnv \
      gpg \
      htop \
      ispell \
      marked \
      pkg-config libxml2 libxslt \
      ruby ruby-build \
      starship \
      tmate \
      bat \
      hexyl

    brew_install --cask emacs --no-quarantine
    brew_install --cask keycastr
    brew_install --cask rectangle

    brew tap dimentium/autoraise
    brew_install autoraise --with-dexperimental_focus_first
    brew services start autoraise
  fi

  if $linux_p ; then
    # basic usability
    apt_install \
      libnotify-bin \
      dconf-editor dconf-cli \
      xclip \
      tree \
      htop \
      guake \
      cheese \
      pavucontrol \
      gdebi \
      gnome-shell-extensions gnome-applets gnome-shell-pomodoro gnome-tweaks

    # basics for development and related activities
    apt_install \
      gitk subversion mercurial bzr \
      valgrind \
      direnv \
      autocutsel \
      universal-ctags \
      mariadb-server mariadb-client libmysqlclient-dev \
      postgresql postgresql-client libpq-dev postgresql-contrib \
      openjdk-21-jdk \
      ack-grep \
      colordiff \
      markdown \
      jq \
      libevent-dev \
      libssl-dev libcrypto++-dev \
      libreadline-dev \
      libxml2 libxml2-dev libxslt1.1 libxslt-dev \
      libyajl-dev libyaml-dev \
      libcurl4-openssl-dev \
      zip \
      python3 python-is-python3 \
      graphviz gv \
      bat hexyl

    # flatpak on ubuntu
    apt_install flatpak gnome-software-plugin-flatpak
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    # fonts
    apt_install \
      fonts-cmu ttf-mscorefonts-installer \
      font-manager

    # obsidian
    if ! flatpak info md.obsidian.Obsidian &> /dev/null ; then
      flatpak_install md.obsidian.Obsidian
    fi

    #  github cli
    if [[ `which gh` == "" ]] ; then
      # https://github.com/cli/cli/blob/trunk/docs/install_linux.md
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list
      apt_update
      apt_install gh
    fi

    #  filesystems, vpn, RDP, bootable drives, backups, etc.
    apt_install \
      hfsprogs cryptsetup \
      network-manager-openvpn-gnome \
      network-manager-vpnc-gnome \
      gufw \
      timeshift

    #  docker
    if [[ `which docker` == "" ]] ; then
      open "https://docs.docker.com/engine/install/debian/#install-using-the-repository"
      # apt_install docker.io
      # sudo usermod -a -G docker $USER
    else
      #  this will fail until you re-login to have the above user group take effect
      echo "checking that docker was installed correctly ..."
      docker run hello-world
    fi

    # power management
    # - http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html
    # - http://linrunner.de/en/tlp/docs/tlp-configuration.html#rdw
    apt_install tlp tlp-rdw acpi-call-dkms smartmontools powertop

    #  some xcompose shortcuts
    XCOMPOSEDIR="${ossdir}/xcompose"
    if [[ ! -d ${XCOMPOSEDIR} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/kragen/xcompose"
      popd
    fi

    # rbenv + ruby-build
    if [[ ! -d $HOME/.rbenv ]] ; then
      git clone https://github.com/rbenv/rbenv.git $HOME/.rbenv
    else
      (cd $HOME/.rbenv && git pull)
    fi
    if [[ ! -d $HOME/.rbenv/plugins/ruby-build ]] ; then
      mkdir -p $HOME/.rbenv/plugins
      git clone https://github.com/rbenv/ruby-build.git $HOME/.rbenv/plugins/ruby-build
    else
      (cd $HOME/.rbenv/plugins/ruby-build && git pull)
    fi
    if ! fgrep "rbenv init" ${bashrc} ; then
      cat <<EOF >> ${bashrc}
# rbenv
if [[ -d \$HOME/.rbenv ]] ; then
  export PATH="\${HOME}/.rbenv/bin:\${PATH}"
  eval "\$(rbenv init -)"
fi

EOF
    fi

    # node
    if [[ ! -d ${ossdir}/nvm ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/nvm-sh/nvm"
      popd
    fi
    if ! fgrep NVM_DIR ${bashrc} ; then
      cat <<EOF >> ${bashrc}
# nvm - added by $0
export NVM_DIR="${ossdir}/nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "\$NVM_DIR/bash_completion" ] && \. "\$NVM_DIR/bash_completion"  # This loads nvm bash_completion

EOF
    fi

    # rust version manager
    snap_install --classic rustup

    # starship bash prompt
    if [[ `which starship` == "" ]] ; then
      wget -q --show-progress https://github.com/starship/starship/releases/latest/download/starship-x86_64-unknown-linux-gnu.tar.gz
      tar xvf starship-x86_64-unknown-linux-gnu.tar.gz
      mv starship ${HOME_LOCAL}/bin/
    fi

    # slack
    if ! command -v slack &> /dev/null; then
      snap_install slack
    fi

    # # chrome. pick one!
    # if [[ `which google-chrome-beta` == "" ]] ; then
    #     open https://www.google.com/intl/en/chrome/browser/beta.html
    # fi
    if [[ `which google-chrome-stable` == "" ]] ; then
      open https://www.google.com/intl/en/chrome/browser/desktop/index.html
    fi

    #
    #  things i have to manually install (pending further automation)
    #
    if ! command -v discord &> /dev/null ; then
      open https://discord.com/download
    fi

    if ! [[ -e /opt/zoom/ZoomLauncher ]] ; then
      open https://zoom.us/download
    fi

    if ! [[ -e /usr/bin/signal-desktop ]] ; then
      open https://signal.org/download/
    fi

    if [[ `which dropbox` == "" ]] ; then
      # in case you need CLI tools: https://help.dropbox.com/installs/linux-commands
      open https://www.dropbox.com/install-linux
    fi

    if [[ `which 1password` == "" ]] ; then
      open https://support.1password.com/get-the-apps/
    fi

    if $mint_p ; then
      ##
      ##  cinnamon
      ##
      apt_install gir1.2-gtop-2.0 # for cinnamon system monitor

      apt_install redshift redshift-gtk geoclue-2.0 geoclue-2-demo

      if [[`which indicator-sound-switcher` == ""]] ; then
        sudo apt-add-repository ppa:yktooo/ppa
        apt_update
        apt_install indicator-sound-switcher
      fi
    fi

    # screencaps
    apt_install peek screenkey

    # steam - https://github.com/flathub/com.valvesoftware.Steam/issues
    if ! flatpak info com.valvesoftware.Steam &> /dev/null ; then
      flatpak_install com.valvesoftware.Steam
    fi

    ###
    ###  things below here need to be scripted again, or I'm not sure I need them
    ###
    # # #  virtualbox
    # # UBUNTU_CODENAME="jammy"
    # #    wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --dearmor --yes --output /usr/share/keyrings/oracle-virtualbox-2016.gpg
    # #    deb [arch=amd64 signed-by=/usr/share/keyrings/oracle-virtualbox-2016.gpg] https://download.virtualbox.org/virtualbox/debian ${UBUNTU_CODENAME} contrib
    # apt_install \
    #   virtualbox-7.0 \
    #   nfs-common nfs-kernel-server


    #  graphics, screencaps, video and sound recording, etc.
    apt_install sox
    #            libsox-fmt-mp3 \
    #            krita kazam gnome-sound-recorder \
    #            libmagickcore-dev libmagick++-dev \
    #            v4l2loopback-dkms v4l2loopback-utils
    # flatpak_install org.gimp.GIMP
    # snap_install shotcut


    # # from https://github.com/snapcrafters/obs-studio
    # #
    # # use the flatpak, not the snap, because it renders better with
    # # hidpi as of 2020-07. also it seems to be better supported.
    # #
    # # if the virtual camera isn't working, try a "modprobe -r" /
    # # "modprobe" cycle on v4l2loopback
    # #
    # # for installing the v4l2sink extension support, see:
    # #
    # # > https://github.com/flathub/com.obsproject.Studio/issues/65#issuecomment-657221604
    # #
    # # but note that the `sirn` branch has been updated since then, so you'll need SDK 5.15 and need
    # # to use the YML file.
    # if [[ ! -e /etc/modprobe.d/v4l2loopback.conf ]] ; then
    #   echo "options v4l2loopback devices=1 video_nr=63 card_label=VirtualCam exclusive_caps=1" \
    #     | sudo tee /etc/modprobe.d/v4l2loopback.conf
    # fi
    # if [[ ! -e /etc/modules-load.d/v4l2loopback.conf ]] ; then
    #   echo "v4l2loopback" \
    #     | sudo tee /etc/modules-load.d/v4l2loopback.conf
    # fi
    # flatpak_install com.obsproject.Studio
  fi
fi

if $config_p ; then
  if [[ `which bundle` != "" ]] ; then
    bundle config set jobs 4
  fi

  #
  #  terminfo for emacsclient in a 256-color terminal
  #  see https://github.com/bbatsov/solarized-emacs/issues/18#issuecomment-294374266
  #
  #  see .bashrc for usage but in summary:
  #
  #    TERM=xterm-24bits emacsclient -nw
  #
  if [[ ! -e $HOME/.terminfo/x/xterm-24bits ]] ; then
    cat <<EOF > /tmp/xterminfo.$$
xterm-24bits|xterm with 24-bit direct color mode,
        use=xterm-256color,
        Tc,
        setb24=\E[48;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
        setf24=\E[38;2;%p1%{65536}%/%d;%p1%{256}%/%{255}%&%d;%p1%{255}%&%dm,
EOF
    tic -x -o $HOME/.terminfo /tmp/xterminfo.$$
  fi

  if $linux_p && test -n "$DISPLAY" ; then
    if $mint_p ; then
      ##
      ##  cinnamon
      ##
      gsettings set org.cinnamon.desktop.wm.preferences focus-mode 'mouse'
      gsettings set org.cinnamon.desktop.wm.preferences num-workspaces 4
      gsettings set org.cinnamon.desktop.peripherals.touchpad tap-to-click false
      gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click false
      gsettings set org.cinnamon.desktop.peripherals.touchpad disable-while-typing true
      gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true
      gsettings set org.cinnamon.desktop.peripherals.touchpad two-finger-scrolling-enabled true
      gsettings set org.gnome.desktop.peripherals.touchpad two-finger-scrolling-enabled true
      gsettings set org.gnome.libgnomekbd.keyboard options "['Compose key\tcompose:ralt', 'caps\tcaps:ctrl_modifier']"
      gsettings set org.cinnamon.desktop.keybindings.wm toggle-maximized "['<Alt>F10', '<Alt><Super>Up']"
      gsettings set org.cinnamon.desktop.keybindings.wm minimize "['<Alt><Super>Down']"

      # move alt-space keybinding from "window menu" to rofi
      gsettings set org.cinnamon.desktop.keybindings.wm activate-window-menu "[]"
      dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/command "'rofi-launcher'"
      dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/name "'rofi-launcher'"
      dconf write /org/cinnamon/desktop/keybindings/custom-keybindings/rofi-binding/binding "['<Alt>space']"
      dconf write /org/cinnamon/desktop/keybindings/custom-list "['rofi-binding']"
    else
      ##
      ##  gnome-shell
      ##
      #
      #  use "dconf watch /" to see what changes when you use the UI, then add the command here.
      #
      # keyboard bindings
      dconf write /org/gnome/desktop/input-sources/xkb-options "['compose:rctrl', 'caps:ctrl_modifier']"
      dconf write /org/gnome/shell/keybindings/show-screen-recording-ui "['<Shift><Control><Alt>Print']"
      dconf write /org/gnome/shell/extensions/tiling-assistant/tile-maximize "['<Control><Super>Up']"
      dconf write /org/gnome/shell/extensions/tiling-assistant/restore-window "['<Control><Super>Down']"
      dconf write /org/gnome/shell/extensions/tiling-assistant/tile-top-half "['<Super>Up']"
      dconf write /org/gnome/shell/extensions/tiling-assistant/tile-bottom-half "['<Super>Down']"

      # gnome-shell dock: detached, auto-hide, on the bottom
      dconf write /org/gnome/shell/extensions/dash-to-dock/dock-fixed "false"
      dconf write /org/gnome/shell/extensions/dash-to-dock/extend-height "false"
      dconf write /org/gnome/shell/extensions/dash-to-dock/dock-position "'BOTTOM'"

      # icons: top bar size, do not show home folder on desktop
      dconf write /org/gnome/shell/extensions/appindicator/icon-size "20"
      dconf write /org/gnome/shell/extensions/ding/show-home "false"

      # fixed number of workspaces
      dconf write /org/gnome/mutter/dynamic-workspaces "false"
      dconf write /org/gnome/desktop/wm/preferences/num-workspaces 5

      # use window tiling state; do not offer tiling popup; do not raise all tiled windows together
      dconf write /org/gnome/shell/extensions/tiling-assistant/dynamic-keybinding-behavior 2
      dconf write /org/gnome/shell/extensions/tiling-assistant/enable-tiling-popup "false"
      dconf write /org/gnome/shell/extensions/tiling-assistant/enable-raise-tile-group "false"

      # night light
      dconf write /org/gnome/settings-daemon/plugins/color/night-light-enabled "true"

      # time: format, change timezones automatically
      dconf write /org/gnome/desktop/interface/clock-show-weekday "true"
      dconf write /org/gnome/desktop/interface/clock-format "'12h'"
      dconf write /org/gtk/settings/file-chooser/clock-format "'12h'"
      dconf write /org/gnome/desktop/datetime/automatic-timezone "true"

      # mouse and touchpad settings
      # - <alt>+click to move and resize windows
      # - two-finger right-click
      # - disable touchpad tap-to-click
      # - focus-follows-mouse
      dconf write /org/gnome/desktop/wm/preferences/resize-with-right-button "true"
      dconf write /org/gnome/desktop/peripherals/touchpad/click-method "'fingers'"
      dconf write /org/gnome/desktop/wm/preferences/mouse-button-modifier "'<Alt>'"
      dconf write /org/gnome/desktop/peripherals/touchpad/tap-to-click "false"
      dconf write /org/gnome/desktop/wm/preferences/focus-mode "'sloppy'"

      # do not attach modal dialog windows
      dconf write /org/gnome/mutter/attach-modal-dialogs "false"

      # lock screen, suspend when plugged in
      dconf write /org/gnome/desktop/session/idle-delay "uint32 900"
      dconf write /org/gnome/desktop/screensaver/lock-delay "uint32 30"
      dconf write /org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type "'suspend'"

      # privacy
      dconf write /org/gnome/desktop/privacy/recent-files-max-age "30"
      dconf write /org/gnome/desktop/privacy/remove-old-trash-files "true"
      dconf write /org/gnome/desktop/privacy/remove-old-temp-files "true"

      # app: quake
      dconf write /org/guake/general/use-trayicon "false"
      dconf write /org/guake/general/window-losefocus "true"
      dconf write /org/guake/general/use-popup "false"
      dconf write /org/guake/general/use-default-font "false"
      dconf write /org/guake/style/font/style "'JetBrains Mono 10'"

      # app: gnome-terminal
      dconf write /org/gnome/terminal/legacy/theme-variant "'system'"
      dconf write /org/gnome/terminal/legacy/new-tab-position "'next'"
      dconf write /org/gnome/terminal/legacy/keybindings/copy "'<Alt>c'"
      dconf write /org/gnome/terminal/legacy/keybindings/paste "'<Alt>v'"

      # configure the default gnome-terminal profile
      default_profile=$(dconf read /org/gnome/terminal/legacy/profiles:/default | cut -d\' -f2)
      if [[ -z "$default_profile" ]] ; then
        default_profile=$(dconf read /org/gnome/terminal/legacy/profiles:/list | cut -d\' -f2)
      fi
      if [[ -n "$default_profile" ]] ; then
        dconf write /org/gnome/terminal/legacy/profiles:/:${default_profile}/use-system-font "false"
        dconf write /org/gnome/terminal/legacy/profiles:/:${default_profile}/font "'JetBrains Mono 10'"
        dconf write /org/gnome/terminal/legacy/profiles:/:${default_profile}/audible-bell "false"
      fi
    fi
  fi
fi

if $clean_p ; then
  if $linux_p ; then
    # clean snap
    sudo snap list --all | awk '/disabled/{print $1, $3}' |
      while read snapname revision; do
        sudo snap remove "$snapname" --revision="$revision"
      done

    # clean flatpak
    flatpak uninstall -y --unused
    sudo flatpak uninstall -y --unused

    if [[ `which docker` != "" ]] ; then
      docker system prune --all --force
      docker volume prune --all --force
    fi
  fi
fi

set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
