#! /usr/bin/env bash
#
# __Encrypted LVM help__
#
#   https://help.ubuntu.com/community/ResizeEncryptedPartitions
#
# __Recommended disk config__
#
# root - 20GB ext4
# swap - 8GB - 16GB swap
# home - whatever's left ext4
#
# __Recovering from a complete loss__
#
# 1. set CapsLock to Ctrl, compose key to right-alt, set sloppy window focus
# 2. recover ssh keys
# 3. `sudo apt-get install git ruby rake`
# 4. clone dotfiles repo, run setup, re-login
# 5. run `dev-machine-setup`
# 6. clone emacs.d repo, run rake
# 7. set up dropbox
# 8. symlink Documents â†’ Shared/Dropbox/Mike
# 9. set up gnome-do keybinding
# 10. set up chrome profiles
# 11. add guake and devilspie2 to startup applications
# 12. add cinnamon applet: "Multi-Core System Monitor"
#
#
# __Lower priority__
#
# 1. background images from Documents/Pictures/Desktop\ Backgrounds
# 2. install gvm
#
#
# __More Things__
#
# - set up alternative chrome profiles
#   - goruco
#   - lostatpivotal
#   - mario pivotalio
# - configure Pivotal VPN
# - check out other code
# - configure timeshift backups
# - install telegram (put it in ~/builds)
# - install purevpn
#
#
# __video issues__
#
#   # add to ~/.profile ...
#   # cinnamon issue with intel gpus
#   # https://github.com/linuxmint/Cinnamon/issues/6224
#   export CLUTTER_VBLANK=none
#

set -o errexit
set -o xtrace

if [[ $(uname) == "Linux" ]] ; then
  linux_p=true
  apple_p=false
elif [[ $(uname) == "Darwin" ]] ; then
  linux_p=false
  apple_p=true
fi

install_p=true
config_p=true
if [[ $1 == "config" ]] ; then
  echo "## configuration only"
  install_p=false
fi

kernel_release=$(uname -r)
ossdir="${HOME}/code/oss"

if $install_p ; then
  if $linux_p ; then
    install="apt install -y -q"
    update="apt update -q"
    open="gnome-open"
  elif $apple_p ; then
    install="brew install"
    update="brew update"
    open="open"
    if [[ `which brew` == "" ]] ; then
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
  fi

  ${update}
fi

if $config_p ; then
  if [[ `which bundle` != "" ]] ; then
    bundle config jobs 2
  fi
fi

if $linux_p ; then
  if $install_p ; then
    #
    #  basic usability
    #
    ${install} \
      gnome-do gnome-do-plugins libgnome2-bin \
      keepassx \
      msttcorefonts \
      gconf-editor \
      xclip \
      terminator \
      devilspie2 \
      htop \
      guake


    #
    #  gpg
    #
    if $linux_p ; then
      ${install} gnupg
    elif $darwin_p ; then
      ${install} gpg
    fi


    #
    #  rvm
    #
    if [[ `which rvm` == "" ]] ; then
      gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
      curl -sSL https://get.rvm.io | bash -s stable
    fi


    #
    #  basics for development and related activities
    #
    ${install} \
      git-core gitk subversion mercurial bzr \
      direnv \
      build-essential valgrind \
      emacs24 autocutsel puppet-el \
      markdown node-marked\
      mariadb-server mariadb-client libmysqlclient-dev \
      postgresql postgresql-client libpq-dev postgresql-contrib \
      openjdk-8-jdk \
      ack-grep \
      curl wget \
      cmake autoconf libtool \
      libpcre++0v5 libpcre++-dev libevent-dev \
      libssl-dev libcrypto++-dev \
      libreadline-dev \
      libxml2 libxml2-dev libxslt1.1 libxslt-dev \
      libyajl-dev libyaml-dev \
      libcurl4-openssl-dev \
      colordiff \
      zip


    #
    #  cf usage and development
    #
    if [[ `which cf` == "" ]] ; then
      wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
      echo "deb http://packages.cloudfoundry.org/debian stable main" | \
        sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
      ${update}
      ${install} cf-cli
    fi

    LPASSD="${ossdir}/lastpass-cli"
    if [[ ! -d ${LPASSD} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/lastpass/lastpass-cli"
      popd
    fi
    if [[ `which lpass` == "" ]] ; then
      pushd ${LPASSD}
      make
      sudo make install
      popd
    fi

    if [[ `which heroku` == "" ]] ; then
      wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
    fi

    #  dependencies for LicenseFinder development
    ${install} npm maven gradle rebar

    if [[ ! -e /usr/bin/node ]] ; then
      # https://github.com/joyent/node/issues/3911
      echo "symlinking node -> nodejs"
      sudo ln -s /usr/bin/nodejs /usr/bin/node
    fi

    if [[ `which bower` == "" ]] ; then
      sudo npm install -g bower
    fi

    if [[ `which pip` == "" ]] ; then
      ${install} python-pip python-dev
      sudo pip install --upgrade pip
      sudo pip install --upgrade virtualenv
    fi


    #
    #  filesystems, vpn, RDP, bootable drives, backups, etc.
    #
    ${install} \
      hfsprogs cryptsetup \
      network-manager-openvpn-gnome \
      gufw \
      timeshift \
      remmina remmina-plugin-rdp libfreerdp-plugins-standard \
      unetbootin


    #
    #  dropbox
    #
    ${install} dropbox python-gpgme


    #
    #   cinnamon system monitor
    #
    ${install} gir1.2-gtop-2.0


    #
    #  virtualbox
    #
    ${install} \
      virtualbox-qt virtualbox-dkms \
      nfs-common nfs-kernel-server


    #
    #  docker
    #
    if [[ `which docker` == "" ]] ; then
      ${install} docker.io
      sudo usermod -a -G docker $USER
    else
      #  this will fail until you re-login to have the above user group take effect
      echo "checking that docker was installed correctly ..."
      docker run hello-world
    fi


    #
    #  graphics, screencaps, etc.
    #
    if [[ `which peek` == "" ]] ; then
      sudo add-apt-repository ppa:peek-developers/stable
      ${update}
      ${install} peek
    fi

    ${install} krita kazam \
               gcolor2 \
               libmagickcore-dev libmagick++-dev


    #
    #  power management
    #
    #  http://linrunner.de/en/tlp/docs/tlp-linux-advanced-power-management.html
    #  http://linrunner.de/en/tlp/docs/tlp-configuration.html#rdw
    #  TODO: make sure touchscreen is added to USB_WHITELIST in /etc/default/tlp
    #
    ${install} tlp tlp-rdw acpi-call-dkms smartmontools powertop # linux-tools


    #
    #  system debugging tools
    #
    ${install} linux-tools-common \
               linux-tools-generic linux-tools-${kernel_release} \
               wireshark \
               sysdig


    #
    #  .XCompose unicode input
    #
    XCOMPOSEDIR="${ossdir}/xcompose"
    if [[ ! -d ${XCOMPOSEDIR} ]] ; then
      pushd ${ossdir}
      git clone "https://github.com/kragen/xcompose"
      popd
    fi
    if [[ ! -e ${HOME}/.XCompose ]] ; then
      pushd ${XCOMPOSEDIR}
      ./install
      popd
    fi
    ${install} uim


    #
    #  flux
    #
    if [[ `which fluxgui` == "" ]] ; then
      # Install dependencies
      ${install} python-appindicator python-xdg python-pexpect python-gconf python-gtk2 python-glade2 libxxf86vm1

      FLUXD="${ossdir}/xflux-gui"
      if [[ ! -d $FLUXD ]] ; then
        pushd $(dirname $FLUXD)
        git clone "https://github.com/xflux-gui/xflux-gui.git"
        popd
      fi
      pushd $FLUXD
      python download-xflux.py
      sudo python setup.py install # install globally
      #python setup.py install --user # install in your home directory
      (fluxgui 2>&1 > /dev/null &)
      popd
    fi


    #
    #  golang stuff
    #
    #  https://johnsogg.github.io/emacs-golang
    #
    if [[ "$GOPATH" != "" ]] ; then
      go get -u golang.org/x/tools/cmd/...
      go get -u github.com/rogpeppe/godef/...
      go get -u github.com/nsf/gocode
      go get -u golang.org/x/tools/cmd/goimports
      go get -u golang.org/x/tools/cmd/guru
      go get -u github.com/dougm/goflymake

      rm ${GOPATH}/bin/bundle
    fi


    #
    #  chrome. pick one!
    #
    # if [[ `which google-chrome-beta` == "" ]] ; then
    #     ${open} https://www.google.com/intl/en/chrome/browser/beta.html
    # fi
    if [[ `which google-chrome-stable` == "" ]] ; then
      ${open} https://www.google.com/intl/en/chrome/browser/desktop/index.html
    fi


    # zoom
    if ! [[ -e /opt/zoom/ZoomLauncher ]] ; then
      ${open} https://zoom.us/download
    fi


    # discord
    if [[ `which discord` == "" ]] ; then
      ${open} https://discordapp.com/download
    fi

    # steam
    if [[ `which steam` == "" ]] ; then
      ${open} https://store.steampowered.com/about/
    fi

    # gitter
    if [[ `which gitter` == "" ]] ; then
      ${open} https://gitter.im/apps
    fi

    # slack
    if ! [[ -e /usr/bin/slack ]] ; then
      ${open} https://slack.com/downloads/linux
    fi

    # purevpn
    if [[ `which purevpn` == "" ]] ; then
      ${open} https://my.purevpn.com/apps
    fi
  fi


  if $config_p ; then
    #
    #  lenovo usb/bluetooth keyboard
    #
    echo "checking for an external thinkpad keyboard ..."
    for TPKB in "ThinkPad Compact USB Keyboard" "ThinkPad Compact Bluetooth Keyboard with TrackPoint" ; do
      if xinput list | egrep "${TPKB}.*pointer" ; then
        kbid=$(xinput list | egrep "${TPKB}.*pointer" | cut -f2 | cut -d= -f2)
        echo "disabling middle-click paste ..."
        xinput set-button-map ${kbid} 1 0 3
      fi
    done

    #
    #  cinnamon config
    #
    gsettings set org.cinnamon.desktop.wm.preferences num-workspaces 3
  fi
fi

set +o xtrace
echo
echo
echo "SUCCESS! Congratulations, you have a box."
echo
echo
